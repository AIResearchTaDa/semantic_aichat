// --- –ó–ê–ì–ê–õ–¨–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
// –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ nginx (http://<IP>:8080)
const SEARCH_API_URL = '/search';
const CHAT_SEARCH_API_URL = '/chat/search';
const CHAT_SEARCH_SSE_URL = '/chat/search/sse';
// Feature flags
const FEATURE_CHAT_AUTOSCROLL = true; // –∞–≤—Ç–æ-—Å–∫—Ä–æ–ª –¥–æ –∫–∞—Ä—É—Å–µ–ª—ñ (ON –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
let FEATURE_CHAT_STREAMING = false; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º OFF, –º–æ–∂–µ –≤–º–∏–∫–∞—Ç–∏—Å—å —á–µ—Ä–µ–∑ /config
// Persistence keys
const WELCOME_SEEN_KEY = 'welcome_seen';
const CHAT_WELCOME_SEEN_KEY = 'chat_welcome_seen';

// ChatGPT —Ç–µ–ø–µ—Ä —á–µ—Ä–µ–∑ backend API
const CHAT_API_URL = '/api/chat/advice';
const TA_DA_API_TOKEN = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpIjoiNTM2NDg3MzAiLCJzIjo4MDk2NzgzMzgyMDQ2MTd9.PZx337yjQl5xX0FPv-scK4wPzuzMZ1zTWTrLoaTI3iY";

// –°—Ö–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∞ –∑ backend) - —Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É TA-DA
const CATEGORY_SCHEMA = {
  // –û–¥—è–≥
  "clothes_tshirts": {"label": "–§—É—Ç–±–æ–ª–∫–∏"},
  "clothes_shirts": {"label": "–°–æ—Ä–æ—á–∫–∏"},
  "clothes_pants": {"label": "–®—Ç–∞–Ω–∏"},
  "clothes_shorts": {"label": "–®–æ—Ä—Ç–∏"},
  "clothes_dresses": {"label": "–°—É–∫–Ω—ñ"},
  "clothes_skirts": {"label": "–°–ø—ñ–¥–Ω–∏—Ü—ñ"},
  "clothes_sweaters": {"label": "–°–≤–µ—Ç—Ä–∏/–•—É–¥—ñ"},
  "clothes_outerwear": {"label": "–ö—É—Ä—Ç–∫–∏/–ü–∞–ª—å—Ç–∞"},
  "clothes_underwear": {"label": "–ë—ñ–ª–∏–∑–Ω–∞/–®–∫–∞—Ä–ø–µ—Ç–∫–∏"},
  "clothes_sleepwear": {"label": "–ü—ñ–∂–∞–º–∏/–î–æ–º–∞—à–Ω—ñ–π –æ–¥—è–≥"},
  "clothes_accessories": {"label": "–ê–∫—Å–µ—Å—É–∞—Ä–∏ –¥–ª—è –æ–¥—è–≥—É"},
  "clothes_shoes": {"label": "–í–∑—É—Ç—Ç—è"},
  // –Ü–≥—Ä–∞—à–∫–∏ —Ç–∞ —ñ–≥—Ä–∏
  "toys_water": {"label": "–î–ª—è –ø–ª–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–æ–¥–∏"},
  "toys_general": {"label": "–Ü–≥—Ä–∞—à–∫–∏"},
  "toys_educational": {"label": "–†–æ–∑–≤–∏–≤–∞—é—á—ñ —ñ–≥—Ä–∞—à–∫–∏"},
  "games_board": {"label": "–ù–∞—Å—Ç—ñ–ª—å–Ω—ñ —ñ–≥—Ä–∏"},
  "toys_outdoor": {"label": "–î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É"},
  // –ö—É—Ö–Ω—è —Ç–∞ –ø–æ—Å—É–¥
  "house_kitchen_cookware": {"label": "–ö—É—Ö–æ–Ω–Ω–∏–π –ø–æ—Å—É–¥"},
  "house_kitchen_tableware": {"label": "–ü–æ—Å—É–¥ –¥–ª—è —Å–µ—Ä–≤—ñ—Ä—É–≤–∞–Ω–Ω—è"},
  "house_kitchen_cutlery": {"label": "–°—Ç–æ–ª–æ–≤—ñ –ø—Ä–∏–±–æ—Ä–∏"},
  "house_kitchen_tools": {"label": "–ö—É—Ö–æ–Ω–Ω—ñ –∞–∫—Å–µ—Å—É–∞—Ä–∏"},
  "house_kitchen_storage": {"label": "–Ñ–º–Ω–æ—Å—Ç—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è"},
  "house_kitchen_textiles": {"label": "–ö—É—Ö–æ–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç–∏–ª—å"},
  // –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è —Ç–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫—ñ —Ç–æ–≤–∞—Ä–∏
  "house_cleaning_tools": {"label": "–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –¥–ª—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è"},
  "house_cleaning_chemicals": {"label": "–ü–æ–±—É—Ç–æ–≤–∞ —Ö—ñ–º—ñ—è"},
  "house_cleaning_bathroom": {"label": "–î–ª—è –≤–∞–Ω–Ω–æ—ó –∫—ñ–º–Ω–∞—Ç–∏"},
  "house_laundry": {"label": "–î–ª—è –ø—Ä–∞–Ω–Ω—è"},
  // –ö–æ—Å–º–µ—Ç–∏–∫–∞ —Ç–∞ –≥—ñ–≥—ñ—î–Ω–∞
  "cosmetics_skincare": {"label": "–î–æ–≥–ª—è–¥ –∑–∞ —à–∫—ñ—Ä–æ—é"},
  "cosmetics_suncare": {"label": "–°–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω—ñ –∑–∞—Å–æ–±–∏"},
  "cosmetics_body": {"label": "–î–æ–≥–ª—è–¥ –∑–∞ —Ç—ñ–ª–æ–º"},
  "cosmetics_oral": {"label": "–ì—ñ–≥—ñ—î–Ω–∞ –ø–æ—Ä–æ–∂–Ω–∏–Ω–∏ —Ä–æ—Ç–∞"},
  "cosmetics_firstaid": {"label": "–ê–ø—Ç–µ—á–∫–∞"},
  // –ö–∞–Ω—Ü–µ–ª—è—Ä—ñ—è
  "stationery_notebooks": {"label": "–ó–æ—à–∏—Ç–∏ —Ç–∞ –±–ª–æ–∫–Ω–æ—Ç–∏"},
  "stationery_paper": {"label": "–ü–∞–ø—ñ—Ä"},
  "stationery_writing": {"label": "–†—É—á–∫–∏ —Ç–∞ –æ–ª—ñ–≤—Ü—ñ"},
  "stationery_cases": {"label": "–ü–µ–Ω–∞–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏"},
  "stationery_art": {"label": "–¢–æ–≤–∞—Ä–∏ –¥–ª—è —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ"},
  "stationery_office": {"label": "–û—Ñ—ñ—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏"},
  // –¢–æ–≤–∞—Ä–∏ –¥–ª—è –¥–æ–º—É
  "home_decor": {"label": "–î–µ–∫–æ—Ä —Ç–∞ –ø—Ä–∏–∫—Ä–∞—Å–∏"},
  "home_textiles": {"label": "–î–æ–º–∞—à–Ω—ñ–π —Ç–µ–∫—Å—Ç–∏–ª—å"},
  "home_storage": {"label": "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è"},
  "home_lighting": {"label": "–û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è"},
  "home_electronics": {"label": "–ü–æ–±—É—Ç–æ–≤–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞"},
  "home_garden": {"label": "–î–ª—è —Å–∞–¥—É —Ç–∞ –≥–æ—Ä–æ–¥—É"},
  // –°–µ–∑–æ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä–∏
  "seasonal_summer": {"label": "–õ—ñ—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏"},
  "seasonal_winter": {"label": "–ó–∏–º–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏"},
  "seasonal_holiday": {"label": "–°–≤—è—Ç–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏"},
  "seasonal_bbq": {"label": "–î–ª—è –ø—ñ–∫–Ω—ñ–∫–∞ —Ç–∞ –±–∞—Ä–±–µ–∫—é"},
  // –Ü–Ω—à–µ
  "home_insects": {"label": "–í—ñ–¥ –∫–æ–º–∞—Ö"},
  "auto_accessories": {"label": "–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä–∏"},
  "pet_supplies": {"label": "–î–ª—è —Ç–≤–∞—Ä–∏–Ω"}
};

// DOM —Ç–∞ —Å—Ç–∞–Ω
const pages = { welcome: document.getElementById('welcomePage'), simple: document.getElementById('simpleSearchPage'), chat: document.getElementById('chatSearchPage') };
// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–æ—à—É–∫–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
const headerSearchInput = document.getElementById('headerSearchInput');
const chatSearchInput = document.getElementById('chatSearchInput');
const chatSearchButton = document.getElementById('chatSearchButton');
const resultsDivs = { simple: document.getElementById('results-simple') };
const cartElement = document.getElementById('full-cart');
const cartItemsElement = document.getElementById('full-cart-items-list');
const chatThread = document.getElementById('chatThread');

let cartItems = [];
let chatStep = 0; // –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫—Ä–æ–∫—ñ–≤ (–¥–ª—è –≤—ñ–¥–º—ñ—Ç–æ–∫ "–ö—Ä–æ–∫ N")
let chatDialogContext = null; // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ dialog_context –≤—ñ–¥ –±–µ–∫–µ–Ω–¥–∞ –º—ñ–∂ —Ä–∞—É–Ω–¥–∞–º–∏
let userHasMinimizedCart = false; // —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–≥–æ—Ä—Ç–∞–≤ –∫–æ—à–∏–∫
let searchBoxAnimationShown = false; // —á–∏ –≤–∂–µ –±—É–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏
let userHasEverAddedItems = false; // —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–æ–ª–∏-–Ω–µ–±—É–¥—å –¥–æ–¥–∞–≤–∞–≤ —Ç–æ–≤–∞—Ä–∏
let priceCache = new Map(); // –∫–µ—à —Ü—ñ–Ω –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
let productsWithPrices = new Map(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ —Ü—ñ–Ω–∞–º–∏
let welcomeGreetingShown = false; // —á–∏ –≤–∂–µ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è GPT
let welcomeMessageMoved = false; // —á–∏ –≤–∂–µ –±—É–ª–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É
let welcomeTypingComplete = false; // —á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥—Ä—É–∫ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

// --- –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –ª–æ–≥ –Ω–∞–∑–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ë–î ---
function logProductTitles(label, products) {
  try {
    if (!Array.isArray(products) || products.length === 0) {
      console.log(`[products] ${label}: <empty>`);
      return;
    }
    const titles = products.map(p => (p?.title_ua || p?.title_ru || p?.title || '–ë–µ–∑ –Ω–∞–∑–≤–∏'));
    console.log(`[products] ${label}:`, titles);
  } catch (_) {}
}

// –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—ñ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (—Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–º'—è—Ç—ñ, –æ—á–∏—â–∞—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ)
let searchHistory = [];
const MAX_HISTORY_ITEMS = 5; // –ú–∞–∫—Å–∏–º—É–º 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—à—É–∫—ñ–≤
const SEARCH_HISTORY_KEY = 'search_history'; // –ö–ª—é—á –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö

// –°–∏—Å—Ç–µ–º–∞ –ª—ñ–º—ñ—Ç—ñ–≤ –¥–ª—è —á–∞—Ç-–ø–æ—à—É–∫—É
const CHAT_SEARCH_LIMIT = 15; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Ç—ñ–≤
const CHAT_SEARCH_WINDOW = 15 * 60 * 1000; // 15 —Ö–≤–∏–ª–∏–Ω –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
const CHAT_SEARCH_LIMIT_KEY = 'chat_search_limit_data';

// –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
  const checkoutBtn = document.getElementById('checkout-btn');
  if(checkoutBtn) checkoutBtn.style.display = 'none';
  
  // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –∑ localStorage —Ç–∞ sessionStorage (—è–∫—â–æ –≤–æ–Ω–∏ —Ç–∞–º —î)
  try {
    localStorage.removeItem(SEARCH_HISTORY_KEY);
    sessionStorage.removeItem(SEARCH_HISTORY_KEY);
    console.log('‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –æ—á–∏—â–µ–Ω–æ - –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤—É —Å–µ—Å—ñ—é');
  } catch(e) {
    console.warn('Failed to clear storage history:', e);
  }
  
  // –ù–ï –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é - –∫–æ–∂–Ω–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è = –Ω–æ–≤–∞ —Å–µ—Å—ñ—è
  searchHistory = [];
  console.log('üìú –ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó - —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  const limitCheck = checkChatSearchLimit();
  console.log('üîí –°—Ç–∞—Ç—É—Å –ª—ñ–º—ñ—Ç—ñ–≤ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ:', limitCheck);
  
  // –ó–∞–ø—É—Å–∫–∞—î–º–æ typewriter –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏
  startTypewriter();
  
  // –°—Ç–∞—Ä—Ç–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∂–¥–∏ welcome (–¥–æ –ø–µ—Ä—à–æ–≥–æ –ø–æ—à—É–∫—É –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ)
  if (pages.welcome) {
    switchPage('welcome');
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —ñ–∫–æ–Ω–æ–∫ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  syncHeaderSearchIcons();

  // –Ø–∫—â–æ —á–∞—Ç-–≤—ñ—Ç–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ —Ä–∞–Ω—ñ—à–µ ‚Äî –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –π–æ–≥–æ —ñ —ñ–Ω–ø—É—Ç –Ω–∞–∑–∞–≤–∂–¥–∏
  try {
    // –ü—ñ—Å–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ–∫–∞–∑—É—î–º–æ —á–∞—Ç-–≤—ñ—Ç–∞–Ω–Ω—è –∑–Ω–æ–≤—É
    sessionStorage.removeItem(CHAT_WELCOME_SEEN_KEY);
    const chatWelcomeSeen = sessionStorage.getItem(CHAT_WELCOME_SEEN_KEY) === '1';
    if (chatWelcomeSeen) {
      const chatWelcome = document.querySelector('#chatSearchPage .chat-welcome');
      if (chatWelcome) chatWelcome.style.display = 'none';
      const mainSearchBox = document.querySelector('#chatSearchPage #mainChatSearchBox');
      if (mainSearchBox) mainSearchBox.style.display = 'none';
    }
  } catch (_) { /* ignore storage errors */ }
  
  // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  welcomeGreetingShown = false;
  welcomeMessageMoved = false;
  welcomeTypingComplete = false;
});

// –•–æ–≤–∞—î —á–∞—Ç-–≤—ñ—Ç–∞–Ω–Ω—è —ñ –≥–æ–ª–æ–≤–Ω–∏–π —ñ–Ω–ø—É—Ç, –æ–ø—Ü—ñ–π–Ω–æ –≤–∏—Å—Ç–∞–≤–ª—è—î –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
function hideChatIntro(setFlag = false){
  try { if (setFlag) sessionStorage.setItem(CHAT_WELCOME_SEEN_KEY, '1'); } catch(_) {}
  const chatWelcome = document.querySelector('#chatSearchPage .chat-welcome');
  if (chatWelcome) chatWelcome.style.display = 'none';
  const mainSearchBox = document.querySelector('#chatSearchPage #mainChatSearchBox');
  if (mainSearchBox) mainSearchBox.style.display = 'none';
  
  // –•–æ–≤–∞—î–º–æ —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—à—É–∫—É
  const quickButtons = document.getElementById('quickSearchButtons');
  if (quickButtons) quickButtons.style.display = 'none';
}

// --- –ö–æ—à–∏–∫ ---
function getProductId(product) {
  return product.id || product.uuid;
}

async function toggleCartItem(product){
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –ø–µ—Ä–µ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º
  if (!product.good_code) {
    return; // –ü—Ä–æ—Å—Ç–æ –≤–∏—Ö–æ–¥–∏–º–æ –±–µ–∑ alert
  }
  
  const productId = getProductId(product);
  const idx = cartItems.findIndex(i=>getProductId(i.product)===productId);
  
  if(idx>-1){
    cartItems.splice(idx,1);
  } else {
    cartItems.push({product,quantity:1});
    userHasEverAddedItems = true; // –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–≤ —Ç–æ–≤–∞—Ä
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º—ñ–Ω—ñ-–∫–æ—Ä–∑–∏–Ω—É
    showMiniCart(product);
  }
  renderCart();
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É
  if(idx>-1){
    // –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è - –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
    renderFullCart();
  } else {
    // –¢–æ–≤–∞—Ä –¥–æ–¥–∞—î—Ç—å—Å—è - –¥–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ –¥–æ –ø–æ–≤–Ω–æ—ó –∫–æ—Ä–∑–∏–Ω–∏
    addItemToFullCart(product);
  }
  
  updateCartTotals(); // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Ü—ñ–Ω—É
  updateSelectedCards();
  updateCartBadge(); // –û–Ω–æ–≤–ª—é—î–º–æ –±–µ–π–¥–∂ –≤ —Ö–µ–¥–µ—Ä—ñ
}
function changeQuantity(productId,delta){
  const item = cartItems.find(i=>getProductId(i.product)===productId);
  if(item){
    item.quantity += delta;
    if(item.quantity<=0){ 
      cartItems = cartItems.filter(i=>getProductId(i.product)!==productId);
      
      // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑ DOM
      const itemCard = document.querySelector(`[data-product-id="${productId}"]`);
      if (itemCard) {
        itemCard.remove();
      }
      
      if (cartItems.length === 0) {
        hideFullCart();
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä–æ–∂–Ω—é –∫–æ—Ä–∑–∏–Ω—É
        const itemsList = document.getElementById('full-cart-items-list');
        if (itemsList) {
          itemsList.innerHTML = '<p class="empty-cart-message">–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</p>';
        }
      } else {
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ —Ç–æ–≤–∞—Ä –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
        renderFullCart();
      }
    } else {
      // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
      const itemCard = document.querySelector(`[data-product-id="${productId}"]`);
      if (itemCard) {
        const quantityDisplay = itemCard.querySelector('.quantity-display');
        if (quantityDisplay) {
          quantityDisplay.textContent = item.quantity;
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Ü—ñ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        const price = parseFloat(item.product.price) || 0;
        const itemTotal = price * item.quantity;
        const totalAmount = itemCard.querySelector('.cart-item-total-amount');
        if (totalAmount) {
          totalAmount.textContent = `${itemTotal.toFixed(2)} ‚Ç¥`;
        }
      }
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
    updateCartTotals();
    
    renderCart();
    renderFullCart(); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ renderFullCart –¥–ª—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, —â–æ–± —Ç–æ–≤–∞—Ä–∏ –Ω–µ –∑–≥–æ—Ä—Ç–∞–ª–∏—Å—è
    updateSelectedCards();
    updateCartBadge();
  }
}

function renderCart(){
  if (!cartItemsElement) {
    return;
  }
  
  cartItemsElement.innerHTML='';
  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –±–µ–π–¥–∂ –≤ —Ö–µ–¥–µ—Ä—ñ
  const headerBadge = document.getElementById('headerCartBadge');
  if(totalItems > 0){
    headerBadge.textContent = totalItems;
    headerBadge.classList.add('visible');
  } else {
    headerBadge.classList.remove('visible');
  }


  if(cartItems.length>0){
    cartItems.forEach(item=>{
      const div=document.createElement('div');
      div.className='cart-item';
      const title=item.product.title_ua||'–ë–µ–∑ –Ω–∞–∑–≤–∏';
      div.innerHTML=`
        <div class="cart-item-info"><span>${title}</span></div>
        <div class="cart-item-controls">
          <button onclick="changeQuantity('${getProductId(item.product)}',-1)">-</button>
          <span>${item.quantity}</span>
          <button onclick="changeQuantity('${getProductId(item.product)}',1)">+</button>
        </div>`;
      cartItemsElement.appendChild(div);
    });
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—é –∑ –ø—ñ–¥—Å—É–º–∫–æ–º –∫–æ–ª–∏ —î —Ç–æ–≤–∞—Ä–∏
    const cartSummary = document.getElementById('cart-summary');
    if(cartSummary) cartSummary.style.display = 'block';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∑–≥–æ—Ä—Ç–∞–≤ –∫–æ—à–∏–∫
    if(!userHasMinimizedCart && cartElement){
      cartElement.classList.add('visible');
    }
  }else{
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä–æ–∂–Ω—é –∫–æ—Ä–∑–∏–Ω—É
    cartItemsElement.innerHTML = '<p style="color: var(--text-light); text-align: center;">–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</p>';
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–µ–∫—Ü—ñ—é –∑ –ø—ñ–¥—Å—É–º–∫–æ–º –∫–æ–ª–∏ –∫–æ—à–∏–∫ –ø—É—Å—Ç–∏–π
    const cartSummary = document.getElementById('cart-summary');
    if(cartSummary) cartSummary.style.display = 'none';
    
    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–æ–ª–∏-–Ω–µ–±—É–¥—å –¥–æ–¥–∞–≤–∞–≤ —Ç–æ–≤–∞—Ä–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ
    if(userHasEverAddedItems && cartElement){
      cartElement.classList.remove('visible');
    }
    
    userHasMinimizedCart = false; // —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤
  }
  updateSelectedCards();
  calculateCartTotal();
}


async function getProductPrice(goodCode) {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å goodCode
  if (!goodCode || goodCode === 'undefined' || goodCode === 'null') {
    return 0;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
  if (priceCache.has(goodCode)) {
    return priceCache.get(goodCode);
  }
  
  try {
    const response = await fetch('/api/ta-da/find.gcode', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': TA_DA_API_TOKEN,
        'User-Language': 'ua'
      },
      body: JSON.stringify({ shop_id: "8", good_code: goodCode })
    });
    
    if (!response.ok) {
      // –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ API
      return 0;
    }
    
    const data = await response.json();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if (data.error) {
      return 0;
    }
    
    // –û–∫—Ä—É–≥–ª—é—î–º–æ —Ü—ñ–Ω—É –¥–æ 2 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏
    const price = data.price ? parseFloat(data.price).toFixed(2) : 0;
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
    priceCache.set(goodCode, price);
    return price;
  } catch (error) {
    // –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ API, –Ω–µ –ª–æ–≥—É—î–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    return 0;
  }
}

async function calculateCartTotal() {
  const cartTotalElement = document.getElementById('cartTotal');
  if (!cartTotalElement) return;
  
  if (cartItems.length === 0) {
    cartTotalElement.textContent = '0.00 ‚Ç¥';
    return;
  }
  
  let totalSum = 0;
  // –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ —Ü—ñ–Ω –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
  const pricePromises = cartItems.map(async (item) => {
    const price = await getProductPrice(item.product.good_code);
    return price * item.quantity;
  });
  
  const prices = await Promise.all(pricePromises);
  totalSum = prices.reduce((sum, price) => sum + parseFloat(price), 0);
  
  cartTotalElement.textContent = `${totalSum.toFixed(2)} ‚Ç¥`;
}

function clearCart() {
  if (cartItems.length === 0) return;
  
  cartItems = [];
  renderCart();
  renderFullCart(); // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É
  updateSelectedCards();
}

function updateSelectedCards(){
  const productCards=document.querySelectorAll('.product-card');
  const ids=cartItems.map(i=>getProductId(i.product));
  
  productCards.forEach((card, index)=>{ 
    const cardId = card.dataset.id || card.dataset.uuid;
    const isSelected = ids.includes(cardId);
    
    if (isSelected) {
      card.classList.add('selected');
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ü—Ä–∏–±—Ä–∞—Ç–∏"
      const addToCartBtn = card.querySelector('.add-to-cart-btn');
      if (addToCartBtn && !addToCartBtn.disabled) {
        addToCartBtn.textContent = '–ü—Ä–∏–±—Ä–∞—Ç–∏';
        addToCartBtn.style.background = '#dc3545'; // –ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      }
    } else {
      card.classList.remove('selected');
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ö—É–ø–∏—Ç–∏"
      const addToCartBtn = card.querySelector('.add-to-cart-btn');
      if (addToCartBtn && !addToCartBtn.disabled) {
        addToCartBtn.textContent = '–ö—É–ø–∏—Ç–∏';
        addToCartBtn.style.background = ''; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä
      }
    }
  });
  updateCartBadge(); // –û–Ω–æ–≤–ª—é—î–º–æ –±–µ–π–¥–∂ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤–∏–±—Ä–∞–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—à–∏–∫–æ–º
function toggleCart(){
  // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ—ó
  showFullCart();
}

// --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É ---
function updateProgress(container, percentage) {
  const progressBar = container.querySelector('.progress-bar');
  if (progressBar) {
    progressBar.style.width = percentage + '%';
  }
  // –ú–∞—Ä–∫–µ—Ä–∏ –ø—Ä–∏–±—Ä–∞–Ω—ñ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—Å–≤—ñ—á—É—î–º–æ
  // –¢–µ–∫—Å—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É
  const stageEl = container.querySelector('.current-stage');
  if (stageEl) {
    let label = '';
    if (percentage < 20) label = '';
    else if (percentage < 40) label = '–ê–Ω–∞–ª—ñ–∑ –∑–∞–ø–∏—Ç—É';
    else if (percentage < 60) label = '–ü–æ—à—É–∫ —É –∫–∞—Ç–∞–ª–æ–∑—ñ';
    else if (percentage < 75) label = '–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤';
    else if (percentage < 90) label = '–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏';
    else if (percentage < 100) label = '–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π';
    else label = '';
    stageEl.textContent = label;
  }
}

// –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —ñ –ø—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å –µ—Ç–∞–ø—É
function updateProgressWithLabel(container, percentage, label) {
  updateProgress(container, percentage);
  const stageEl = container.querySelector('.current-stage');
  if (stageEl && typeof label === 'string') {
    stageEl.textContent = label;
  }
}

function createProgressLoader() {
  return `
    <div class="loading-container">
      <div class="progress-loader">
        <div class="progress-bar" style="width: 0%"></div>
      </div>
      <div class="loading-text">
        <p>–®—É–∫–∞—é —Ç–æ–≤–∞—Ä–∏...</p>
        <p class="loading-subtitle">–ó–∞—á–µ–∫–∞–π—Ç–µ, –ø–æ–∫–∏ AI –∑–Ω–∞–π–¥–µ –Ω–∞–π–∫—Ä–∞—â—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –≤–∞—Å.</p>
      </div>
    </div>
  `;
}

// --- –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ ---
async function performSimpleSearch(){
  const query = headerSearchInput.value.trim();
  if(query.length === 0 || query.split(/\s+/).length === 0){ return; }
  
  // –ü—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –±—É–¥—å-—è–∫–æ–≥–æ –ø–æ—à—É–∫—É –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
  sessionStorage.setItem(WELCOME_SEEN_KEY, '1');
  
  // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ —â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—à—É–∫—É
  if (!pages.simple.classList.contains('active')) {
    switchPage('simple');
  }
  
  resultsDivs.simple.innerHTML = createProgressLoader();
  
  try{
    // –ü—Ä–æ–≥—Ä–µ—Å: 20% - –ø–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É
    updateProgress(resultsDivs.simple, 20);
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –ø—Ä–æ–≥—Ä–µ—Å—É
    await new Promise(resolve => setTimeout(resolve, 200));
    // –ü—Ä–æ–≥—Ä–µ—Å: 40% - –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Ç—É
    updateProgress(resultsDivs.simple, 40);
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –±—ñ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π score
    const searchParams = {
      query: query,
      k: 100, // –ú–∞–∫—Å–∏–º—É–º 100 —Ç–æ–≤–∞—Ä—ñ–≤
      min_score: 0.1 // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ
    };
    
    // –ü—Ä–æ–≥—Ä–µ—Å: 60% - –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É
    updateProgress(resultsDivs.simple, 60);
    
    const res = await fetch(SEARCH_API_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(searchParams)});
    
    // –ü—Ä–æ–≥—Ä–µ—Å: 80% - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    updateProgress(resultsDivs.simple, 80);
    
    const data = await res.json();
    if(!res.ok) throw new Error(data.detail || `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${res.status}`);
    
    // –ü—Ä–æ–≥—Ä–µ—Å: 90% - –æ–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    updateProgress(resultsDivs.simple, 90);
    
    const allProducts = data.results || [];
    // –õ–æ–≥ –Ω–∞–∑–≤ —Ç–æ–≤–∞—Ä—ñ–≤ (–ø—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫)
    logProductTitles('simple-search', allProducts);
    if(allProducts.length === 0){
      resultsDivs.simple.innerHTML = '<div class="result-placeholder"><p>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p></div>';
      return;
    }

    // –ü—Ä–æ–≥—Ä–µ—Å: 100% - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    updateProgress(resultsDivs.simple, 100);
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    await new Promise(resolve => setTimeout(resolve, 300));

    // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ (–≤–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ score)
    displaySimpleResults(allProducts);
  }catch(e){
    resultsDivs.simple.innerHTML = `<div class="result-placeholder"><p style="color:red;">–ü–æ–º–∏–ª–∫–∞: ${e.message}</p></div>`;
  }
}

// --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é ---
function getSearchHistory() {
  return searchHistory;
}

// --- MEMORY-ONLY HISTORY MANAGEMENT ---
// –Ü—Å—Ç–æ—Ä—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–º'—è—Ç—ñ - –æ—á–∏—â–∞—î—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
function loadSearchHistoryFromStorage() { 
  // –ë—ñ–ª—å—à–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ storage - —ñ—Å—Ç–æ—Ä—ñ—è —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–º'—è—Ç—ñ
  searchHistory = [];
}

function saveSearchHistoryToStorage() {
  // –ë—ñ–ª—å—à–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ storage - —ñ—Å—Ç–æ—Ä—ñ—è —Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–º'—è—Ç—ñ
  // –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
}

function addToSearchHistory(query) {
  if (!query || typeof query !== 'string' || query.trim().length === 0) return;
  
  const historyItem = {
    query: query.trim(),
    timestamp: new Date().toISOString()
  };
  
  // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Ç —è–∫—â–æ —Ç–∞–∫–∏–π —Å–∞–º–∏–π)
  if (searchHistory.length > 0 && searchHistory[searchHistory.length - 1].query === historyItem.query) {
    return;
  }
  
  searchHistory.push(historyItem);
  
  // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —ñ—Å—Ç–æ—Ä—ñ—ó
  if (searchHistory.length > MAX_HISTORY_ITEMS) {
    searchHistory = searchHistory.slice(-MAX_HISTORY_ITEMS);
  }
  
  saveSearchHistoryToStorage();
}

function clearSearchHistory() { 
  searchHistory = []; 
  console.log('üóëÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—à—É–∫—ñ–≤ –æ—á–∏—â–µ–Ω–∞ (–ø–∞–º\'—è—Ç—å)');
}

// --- –°–ò–°–¢–ï–ú–ê –õ–Ü–ú–Ü–¢–Ü–í –ß–ê–¢-–ü–û–®–£–ö–£ ---
function getChatSearchLimitData() {
  try {
    const stored = localStorage.getItem(CHAT_SEARCH_LIMIT_KEY);
    if (stored) {
      const data = JSON.parse(stored);
      // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Ç–∏ (—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω)
      const now = Date.now();
      data.searches = data.searches.filter(timestamp => (now - timestamp) < CHAT_SEARCH_WINDOW);
      return data;
    }
  } catch (e) {
    console.warn('Failed to load chat search limit data:', e);
  }
  return { searches: [] };
}

function saveChatSearchLimitData(data) {
  try {
    localStorage.setItem(CHAT_SEARCH_LIMIT_KEY, JSON.stringify(data));
  } catch (e) {
    console.warn('Failed to save chat search limit data:', e);
  }
}

function checkChatSearchLimit() {
  const data = getChatSearchLimitData();
  const remaining = CHAT_SEARCH_LIMIT - data.searches.length;
  
  if (remaining <= 0) {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    const oldestSearch = Math.min(...data.searches);
    const timeUntilReset = CHAT_SEARCH_WINDOW - (Date.now() - oldestSearch);
    const minutesLeft = Math.ceil(timeUntilReset / 60000);
    
    return {
      allowed: false,
      remaining: 0,
      minutesLeft: minutesLeft
    };
  }
  
  return {
    allowed: true,
    remaining: remaining,
    minutesLeft: 0
  };
}

function recordChatSearchRequest() {
  const data = getChatSearchLimitData();
  data.searches.push(Date.now());
  saveChatSearchLimitData(data);
  console.log('üìä –ó–∞–ø–∏—Å–∞–Ω–æ –∑–∞–ø–∏—Ç. –ó–∞–ª–∏—à–∏–ª–æ—Å—å:', CHAT_SEARCH_LIMIT - data.searches.length);
}

function showChatSearchLimitMessage(minutesLeft) {
  // –•–æ–≤–∞—î–º–æ –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É
  const searchBox = document.getElementById('chatSearchBox');
  if (searchBox) {
    searchBox.style.display = 'none';
  }
  
  // –•–æ–≤–∞—î–º–æ —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏
  const quickButtons = document.getElementById('quickSearchButtons');
  if (quickButtons) quickButtons.style.display = 'none';
  
  const aiExamples = document.getElementById('aiExamples');
  if (aiExamples) aiExamples.style.display = 'none';
  
  // –•–æ–≤–∞—î–º–æ AI welcome –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  const aiWelcome = document.getElementById('aiWelcomeContainer');
  if (aiWelcome) aiWelcome.style.display = 'none';
  
  // –î–æ–¥–∞—î–º–æ –∫–æ–º–ø–∞–∫—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ª—ñ–º—ñ—Ç –∑–∞–º—ñ—Å—Ç—å –≤–µ–ª–∏–∫–æ–≥–æ –±–ª–æ–∫—É
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  let limitBanner = document.getElementById('chatLimitBanner');
  if (!limitBanner) {
    limitBanner = document.createElement('div');
    limitBanner.id = 'chatLimitBanner';
    limitBanner.className = 'chat-limit-banner';
    
    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø—ñ—Å–ª—è chatThread (–≤ –∫—ñ–Ω–µ—Ü—å)
    const chatThread = document.getElementById('chatThread');
    if (chatThread && chatThread.parentNode) {
      // –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø—ñ—Å–ª—è chatThread
      chatThread.parentNode.insertBefore(limitBanner, chatThread.nextSibling);
    }
  }
  
  limitBanner.innerHTML = `
    <div class="limit-banner-content">
      <span class="limit-banner-icon">‚è±Ô∏è</span>
      <div class="limit-banner-text">
        <strong>–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤</strong>
        <span>–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ 15 –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ <strong id="limitTimer">${minutesLeft} ${minutesLeft === 1 ? '—Ö–≤' : '—Ö–≤'}</strong> –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å <a href="#" onclick="activateSimpleSearchFromLimit(); return false;">–∑–≤–∏—á–∞–π–Ω–∏–º –ø–æ—à—É–∫–æ–º</a></span>
      </div>
    </div>
  `;
  
  // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
  startLimitCheckTimer();
}

// –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ–º—ñ—Ç—É
let limitCheckInterval = null;

function startLimitCheckTimer() {
  // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä —è–∫—â–æ —î
  if (limitCheckInterval) {
    clearInterval(limitCheckInterval);
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
  limitCheckInterval = setInterval(() => {
    const limitCheck = checkChatSearchLimit();
    
    if (limitCheck.allowed) {
      // –õ—ñ–º—ñ—Ç –∑–Ω—è—Ç–æ - –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –¥–æ—Å—Ç—É–ø
      console.log('‚úÖ –õ—ñ–º—ñ—Ç –∑–Ω—è—Ç–æ, –¥–æ—Å—Ç—É–ø –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
      clearInterval(limitCheckInterval);
      limitCheckInterval = null;
      
      // –Ø–∫—â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —á–∞—Ç-–ø–æ—à—É–∫—É, –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (currentSearchMode === 'chat') {
        hideChatSearchLimitMessage();
        location.reload(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç—É
      }
    } else {
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä
      const timerEl = document.getElementById('limitTimer');
      if (timerEl) {
        const minutes = limitCheck.minutesLeft;
        timerEl.textContent = `${minutes} ${minutes === 1 ? '—Ö–≤–∏–ª–∏–Ω—É' : minutes < 5 ? '—Ö–≤–∏–ª–∏–Ω–∏' : '—Ö–≤–∏–ª–∏–Ω'}`;
      }
    }
  }, 60000); // –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
}

function hideChatSearchLimitMessage() {
  const limitBanner = document.getElementById('chatLimitBanner');
  if (limitBanner) {
    limitBanner.remove();
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É
  const searchBox = document.getElementById('chatSearchBox');
  if (searchBox) {
    searchBox.style.display = 'flex';
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏
  const quickButtons = document.getElementById('quickSearchButtons');
  if (quickButtons) quickButtons.style.display = 'flex';
  
  const aiExamples = document.getElementById('aiExamples');
  if (aiExamples) aiExamples.style.display = 'block';
}

function activateSimpleSearchFromLimit() {
  // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—å –Ω–∞ –∑–≤–∏—á–∞–π–Ω–∏–π –ø–æ—à—É–∫
  if (!pages.simple.classList.contains('active')) {
    switchPage('simple');
    hideFooter();
  }
  
  // –§–æ–∫—É—Å—É—î–º–æ—Å—å –Ω–∞ –ø–æ—à—É–∫–æ–≤—ñ–π —Å—Ç—Ä–æ—Ü—ñ
  const headerSearchInput = document.getElementById('headerSearchInput');
  if (headerSearchInput) {
    headerSearchInput.focus();
  }
}

// --- –ß–∞—Ç-–ø–æ—à—É–∫: –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç = –Ω–æ–≤–∞ —Å–µ–∫—Ü—ñ—è ---
let performChatSearchRunning = false;
let activeChatSearchEventSource = null; // –î–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è SSE –ø–æ—à—É–∫—É

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É
function cancelChatSearch() {
  if (activeChatSearchEventSource) {
    try {
      activeChatSearchEventSource.close();
      console.log('üõë –ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
    } catch(e) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ EventSource:', e);
    }
    activeChatSearchEventSource = null;
  }
  
  // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É
  performChatSearchRunning = false;
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É —Å—Ç—Ä—ñ–ª–∫–∏
  const btn = document.getElementById('chatSearchButton');
  if (btn) {
    btn.classList.remove('searching');
    btn.innerHTML = '<img src="images/icon_search.png" alt="–ü–æ—à—É–∫" width="20" height="20">';
  }
  
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–µ–∫—Ü—ñ—ó, —è–∫—â–æ —î
  const lastSection = document.querySelector('.query-section:last-child');
  if (lastSection) {
    const bodyEl = lastSection.querySelector('.query-body');
    if (bodyEl) {
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      bodyEl.classList.remove('loading');
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞, —è–∫—ñ —â–µ –¥—Ä—É–∫—É—é—Ç—å—Å—è (–º–∞—é—Ç—å –∫–ª–∞—Å typing)
      const typingMessages = bodyEl.querySelectorAll('.assistant-message.typing');
      typingMessages.forEach(msg => {
        msg.classList.remove('typing');
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —É HTML (–∑–∞–º—ñ–Ω—é—î–º–æ \n –Ω–∞ <br>)
        if (msg.dataset.rawText) {
          msg.innerHTML = msg.dataset.rawText.replace(/\n/g, '<br>');
          delete msg.dataset.rawText;
        }
      });
      
      // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
      const cancelMsg = document.createElement('div');
      cancelMsg.className = 'assistant-message';
      cancelMsg.style.color = '#666';
      cancelMsg.style.fontStyle = 'italic';
      cancelMsg.textContent = '–ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ';
      bodyEl.appendChild(cancelMsg);
    }
  }
}

async function performChatSearch(directQuery = null){
  // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  if (performChatSearchRunning) {
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤
  const limitCheck = checkChatSearchLimit();
  if (!limitCheck.allowed) {
    console.warn('‚õî –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤:', limitCheck);
    showChatSearchLimitMessage(limitCheck.minutesLeft);
    return;
  }
  
  performChatSearchRunning = true;
  
  const query = directQuery || chatSearchInput.value.trim();
  
  if(query.length<2){ 
    performChatSearchRunning = false;
    return alert("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏."); 
  }
  
  // –ó–∞–ø–∏—Å—É—î–º–æ –∑–∞–ø–∏—Ç –≤ —Å–∏—Å—Ç–µ–º—É –ª—ñ–º—ñ—Ç—ñ–≤
  recordChatSearchRequest();
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º —á–∞—Ç-–ø–æ—à—É–∫—É
  currentSearchMode = 'chat';
  
  // –•–æ–≤–∞—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π –±–ª–æ–∫ AI –ø–æ—à—É–∫—É
  hideAIWelcome();
  
  // –°—Ä–∞–∑—É —Ö–æ–≤–∞—î–º–æ —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–æ—à—É–∫—É
  const quickButtons = document.getElementById('quickSearchButtons');
  if (quickButtons) {
    quickButtons.style.display = 'none';
  }
  
  // –ü—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –±—É–¥—å-—è–∫–æ–≥–æ –ø–æ—à—É–∫—É –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ—Ç–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
  sessionStorage.setItem(WELCOME_SEEN_KEY, '1');
  
  // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ —â–æ –º–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —á–∞—Ç-–ø–æ—à—É–∫—É
  if (!pages.chat.classList.contains('active')) {
    switchPage('chat');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä—à–∏–π –ø–æ—à—É–∫
  const isFirstSearch = chatStep === 0;
  
  // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É –≤–Ω–∏–∑ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –ø–æ—à—É–∫—É –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
  if (isFirstSearch) {
    const searchBox = document.getElementById('chatSearchBox');
    if (searchBox) {
      // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤–Ω–∏–∑ (—Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–∞–∑—ñ)
      searchBox.classList.remove('chat-search-box--center');
      if (!searchBoxAnimationShown) {
        searchBox.classList.add('chat-search-box--footer');
        searchBox.style.animation = 'slideDownToFooter 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';
        searchBoxAnimationShown = true;
      } else {
        searchBox.classList.add('chat-search-box--footer-static');
        searchBox.style.animation = 'none';
      }
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –±—ñ–ª–∏–π –±–ª–æ–∫ –ø—ñ–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é
      const footerMask = document.getElementById('footer-mask');
      if (footerMask) {
        footerMask.style.display = 'block';
      }
      
      // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –µ—Ñ–µ–∫—Ç –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
      searchBox.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
      
      // –°—Ç—Ä–æ–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–∏–¥–∏–º–æ—é –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—ñ
    }
    
  }
  
  // –°–∫–∏–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥—ñ–∞–ª–æ–≥—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É
  chatDialogContext = null;
  
  chatSearchInput.value = '';
  
  // –ó–º—ñ–Ω—é—î–º–æ —ñ–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ (–∫–Ω–æ–ø–∫–∞ –∑—É–ø–∏–Ω–∫–∏)
  const btn = document.getElementById('chatSearchButton');
  if (btn) {
    btn.classList.add('searching');
    btn.classList.add('visible'); // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É
    btn.innerHTML = '<div class="stop-icon"></div>';
  }
  
  try{
    // –ó–∞–ø–∏—Ç–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥ —ñ –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —á–∏ –≤–º–∏–∫–∞—Ç–∏ —Å—Ç—Ä—ñ–º—ñ–Ω–≥
    const cfg = await fetch('/config', { cache: 'no-store' }).then(r=>r.ok?r.json():({})).catch(()=>({}));
    if (typeof cfg.feature_chat_sse === 'boolean') {
      FEATURE_CHAT_STREAMING = cfg.feature_chat_sse;
    }
  }catch(_){ /* ignore */ }

  if (FEATURE_CHAT_STREAMING) {
    runChatRoundStreaming({ type: 'text', value: query });
  } else {
    runChatRound({ type: 'text', value: query });
  }
  
  // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É –ø–æ—à—É–∫—É
  setTimeout(() => {
    performChatSearchRunning = false;
  }, 2000);
}

async function runChatRound(input){
  // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–≥–æ—Ä—É –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—à—É–∫—É
  moveWelcomeMessageUp();
  
  const isCategoryFilter = input?.type === 'category';
  
  let section, sectionId, bodyEl;
  
  if (isCategoryFilter) {
    // –ü—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ–π - –æ–Ω–æ–≤–ª—é—î–º–æ —Å–µ–∫—Ü—ñ—é, –∑ —è–∫–æ—ó –∫–ª—ñ–∫–Ω—É–ª–∏ (sectionId)
    const targetStep = Number(input.sectionId);
    const targetSelector = isFinite(targetStep) && targetStep > 0 
      ? `.query-section[data-step="${targetStep}"]`
      : '.query-section:last-child';
    const targetSection = document.querySelector(targetSelector);
    if (targetSection) {
      section = targetSection;
      sectionId = parseInt(section.dataset.step) || chatStep;
      bodyEl = section.querySelector('.query-body');
      // –õ–∏—à–µ –¥–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –Ω–µ –æ—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑ —Ç–µ–∫—Å—Ç–æ–º –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
      bodyEl.classList.add('loading');
    } else {
      // –Ø–∫—â–æ –Ω–µ–º–∞—î —Å–µ–∫—Ü—ñ—ó - —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
      sectionId = ++chatStep;
      const userText = `–û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: ${input.valueLabel || input.value}`;
      section = renderPendingSection(sectionId, userText);
      bodyEl = section.querySelector('.query-body');
    }

    // –ö–õ–Ü–Ñ–ù–¢–°–¨–ö–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø –ë–ï–ó –ó–ê–ü–ò–¢–£ –î–û –ë–ï–ö–ï–ù–î–ê (–ø–æ —Å–µ–∫—Ü—ñ—ó)
    try {
      // –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ–∫—Ü—ñ—ó –∑ DOM, —è–∫—â–æ —î
      let sectionCtx = null;
      try {
        const ctxEl = section.querySelector('script[type="application/json"][data-section-context]');
        sectionCtx = ctxEl ? JSON.parse(ctxEl.textContent || '{}') : null;
      } catch(_) { sectionCtx = null; }

      const allProducts = Array.isArray(sectionCtx?.all_products) ? sectionCtx.all_products : (Array.isArray(chatDialogContext?.all_products) ? chatDialogContext.all_products : []);
      const buckets = sectionCtx?.category_buckets || chatDialogContext?.category_buckets || {};
      const currentFilter = (typeof sectionCtx?.current_filter !== 'undefined') ? sectionCtx.current_filter : (chatDialogContext?.current_filter || null);
      const recoIdsFromCtx = Array.isArray(sectionCtx?.reco_ids) ? sectionCtx.reco_ids : (Array.isArray(chatDialogContext?.reco_ids) ? chatDialogContext.reco_ids : []);
      const actions = sectionCtx?.actions || chatDialogContext?.actions || [];

      // –û–±—á–∏—Å–ª—é—î–º–æ –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–¥–æ–ø—É—Å–∫–∞—î–º–æ —è–∫ –∫–æ–¥, —Ç–∞–∫ —ñ label)
      const resolved = resolveCategoryCodeAndLabel(input?.value || input?.valueLabel);
      const selectedCode = resolved.code;

      // –¢–æ–≥–ª —Ñ—ñ–ª—å—Ç—Ä–∞
      const newFilter = (selectedCode && selectedCode === currentFilter) ? null : selectedCode;

      // –í—ñ–¥–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤
      let filtered = allProducts;
      if (newFilter) {
        // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –ø–æ label (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è –≤–∞—Å")
        const bucketItems = buckets[input?.value] || buckets[input?.valueLabel] || buckets[newFilter];
        
        if (Array.isArray(bucketItems) && bucketItems.length > 0) {
          // bucketItems –º—ñ—Å—Ç–∏—Ç—å ID —Ç–æ–≤–∞—Ä—ñ–≤ (strings), –∞ –Ω–µ –æ–±'—î–∫—Ç–∏
          const idSet = new Set(bucketItems);
          filtered = allProducts.filter(p => idSet.has(p.id));
        } else {
          // Fallback –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö –∑ CATEGORY_SCHEMA
          const kws = CATEGORY_SCHEMA[newFilter]?.keywords || [];
          if (kws.length > 0) {
            const hay = (p) => `${p?.title_ua || ''} ${p?.description_ua || ''}`.toLowerCase();
            filtered = allProducts.filter(p => kws.some(kw => hay(p).includes(kw)));
          } else {
            filtered = allProducts; // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å–µ —è–∫—â–æ –Ω–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
          }
        }
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ–∫—Ü—ñ—ó –≤ DOM —ñ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å
      const ctxEl = section.querySelector('script[type="application/json"][data-section-context]') || (function(){ const el=document.createElement('script'); el.type='application/json'; el.setAttribute('data-section-context',''); section.appendChild(el); return el; })();
      const newCtx = JSON.stringify({
        available_categories: (sectionCtx?.available_categories || chatDialogContext?.available_categories || []),
        all_products: allProducts,
        category_buckets: buckets,
        current_filter: newFilter,
        reco_ids: recoIdsFromCtx
      });
      ctxEl.textContent = newCtx;
      
      updateCarouselInSection(section, { products: filtered });
      return; // –≤–∞–∂–ª–∏–≤–æ: –Ω–µ —Ä–æ–±–∏–º–æ –º–µ—Ä–µ–∂–µ–≤–∏–π –∑–∞–ø–∏—Ç —ñ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ–∫—Ü—ñ—é
    } catch (e) {
      console.error('‚ùå –ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, fallback –Ω–∞ –±–µ–∫–µ–Ω–¥:', e);
      // –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–∞–¥–∞—î–º–æ —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à–ª—è—Ö –∑ –±–µ–∫–µ–Ω–¥–æ–º –Ω–∏–∂—á–µ
    }
  } else {
    // –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É - —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–µ–∫—Ü—ñ—é
    sectionId = ++chatStep;
    const userText = input?.type === 'category' ? `–û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: ${input.valueLabel || input.value}` : input?.value || '';
    section = renderPendingSection(sectionId, userText);
    bodyEl = section.querySelector('.query-body');
    
    // –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ fallback –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ü–µ —à–≤–∏–¥–∫–∏–π –∑–∞–ø–∏—Ç)
  }

  try{
    // 1) –ß–∞—Ç-–ø–æ—à—É–∫ –∑ –¥—ñ–∞–ª–æ–≥–æ–º —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ (BM25 + GPT –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ)
    const chatData = await fetchChatAnalysisPayload({
      input,
      dialog_context: chatDialogContext,
    });
    chatDialogContext = chatData?.dialog_context || null;
    
    // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è
    if (!isCategoryFilter && input?.value) {
      addToSearchHistory(input.value);
    }
    
    const advice = chatData?.assistant_message || '';
    const products = Array.isArray(chatData?.results) ? chatData.results : [];
    const recommendations = Array.isArray(chatData?.recommendations) ? chatData.recommendations : [];
    const actions = Array.isArray(chatData?.actions) ? chatData.actions : null;
    const needsInput = !!chatData?.needs_user_input;
    // –õ–æ–≥ –Ω–∞–∑–≤ —Ç–æ–≤–∞—Ä—ñ–≤ (—á–∞—Ç-–ø–æ—à—É–∫)
    logProductTitles('chat-search', products);
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // 2) –†–µ–Ω–¥–µ—Ä: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑–ª—ñ–≤–∞ + (–æ–ø—Ü—ñ–π–Ω–æ) –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π + –∫–∞—Ä—É—Å–µ–ª—å
    if (isCategoryFilter) {
      // –ü—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó - –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–∞—Ä—É—Å–µ–ª—å, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      updateCarouselInSection(section, { products, recommendations });
    } else {
      // –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É - —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –≤—Å—é —Å–µ–∫—Ü—ñ—é; –ø–æ–∫–∞–∑—É—î–º–æ –í–°–Ü —Ç–æ–≤–∞—Ä–∏ (—Å–ø–µ—Ä—à—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ)
      finalizeSection(section, { advice, products, recommendations, actions, needsInput });
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ–∫—Ü—ñ—ó –≤ DOM –¥–ª—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
      try {
        const ctxEl = document.createElement('script');
        ctxEl.type = 'application/json';
        ctxEl.setAttribute('data-section-context','');
        
        // –í–∏—Ç—è–≥—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ actions
        const categoriesFromActions = Array.isArray(actions) 
          ? actions
              .filter(a => a?.type === 'button' && a?.action === 'select_category')
              .map(a => a.value)
          : [];
        
        const ctx = {
          available_categories: categoriesFromActions.length > 0 ? categoriesFromActions : (chatDialogContext?.available_categories || []),
          all_products: Array.isArray(products) ? products : [],
          category_buckets: (chatDialogContext?.category_buckets || {}),
          current_filter: null,
          reco_ids: Array.isArray(recommendations) ? recommendations.map(r => r.product_id) : [],
          actions: actions  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ actions –∑ special –ø—Ä–∞–ø–æ—Ä—Ü—è–º–∏
        };
        ctxEl.textContent = JSON.stringify(ctx);
        section.appendChild(ctxEl);
      } catch(_) {}
    }
    updateSelectedCards();
    
    // 4) –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—É—Ç–µ—Ä –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—à—É–∫—É)
    if (sectionId === 1) {
      showFooter();
    }
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    const btn = document.getElementById('chatSearchButton');
    if (btn) {
      btn.classList.remove('searching');
      btn.classList.remove('visible');
      btn.innerHTML = '<img src="images/icon_search.png" alt="–ü–æ—à—É–∫" width="20" height="20">';
    }

  } catch(error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∞—Ç-–ø–æ—à—É–∫—É:', error);
    setSectionError(section, error.message);
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    const btn = document.getElementById('chatSearchButton');
    if (btn) {
      btn.classList.remove('searching');
      btn.classList.remove('visible');
      btn.innerHTML = '<img src="images/icon_search.png" alt="–ü–æ—à—É–∫" width="20" height="20">';
    }
  }
}

// –°—Ç—Ä—ñ–º—ñ–Ω–≥–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
async function runChatRoundStreaming(input){
  // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–≥–æ—Ä—É –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—à—É–∫—É
  moveWelcomeMessageUp();
  
  const isCategoryFilter = input?.type === 'category';
  if (isCategoryFilter) {
    // –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ–∫–∏ —â–æ –ª–∏—à–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π POST –±–µ–∑ SSE
    return runChatRound(input);
  }

  let section, sectionId, bodyEl;
  {
    chatStep += 1;
    sectionId = chatStep;
    section = renderPendingSection(sectionId, input?.value || '');
    bodyEl = section.querySelector('.query-body');
    
    // –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–¥—Ä–∞–∑—É - —á–µ–∫–∞—î–º–æ –Ω–∞ –ø–æ–¥—ñ—ó –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞
  }

  try{
    const sessionId = `session_${Date.now()}`;
    const params = new URLSearchParams({ query: input.value, session_id: sessionId, k: String(100) });
    
    // –ü–µ—Ä–µ–¥–∞—î–º–æ search_history –æ–∫—Ä–µ–º–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–ù–ï –≤ dialog_context!)
    const historyJson = JSON.stringify(getSearchHistory());
    const historyB64 = btoa(unescape(encodeURIComponent(historyJson)));
    params.append('search_history_b64', historyB64);
    
    // –î–æ–¥–∞—î–º–æ dialog_context —è–∫—â–æ –≤—ñ–Ω —î (–ë–ï–ó search_history - –≤–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ)
    if (chatDialogContext) {
      try {
        const contextJson = JSON.stringify(chatDialogContext);
        const contextB64 = btoa(unescape(encodeURIComponent(contextJson)));
        params.append('dialog_context_b64', contextB64);
        console.log('üì§ –ü–µ—Ä–µ–¥–∞—î–º–æ dialog_context –≤ SSE:', chatDialogContext);
        
        // –õ–æ–≥—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–µ –ø–æ–ª–µ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (chatDialogContext.clarification_asked) {
          console.warn('‚ö†Ô∏è –£–í–ê–ì–ê: clarification_asked=true! GPT –ü–û–í–ò–ù–ï–ù —à—É–∫–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, –∞ –ù–ï –ø–∏—Ç–∞—Ç–∏ –∑–Ω–æ–≤—É!');
          console.warn('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫—ñ –±—É–ª–∏ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω—ñ:', chatDialogContext.categories_suggested);
        }
      } catch(e) {
        console.warn('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—ñ dialog_context:', e);
      }
    }
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—à—É–∫—É
    function restoreSearchButton() {
      activeChatSearchEventSource = null;
      const btn = document.getElementById('chatSearchButton');
      if (btn) {
        btn.classList.remove('searching');
        btn.classList.remove('visible');
        btn.innerHTML = '<img src="images/icon_search.png" alt="–ü–æ—à—É–∫" width="20" height="20">';
      }
    }
    
    // –ü–æ—á–∞—Ç–æ–∫ SSE –ø–æ—à—É–∫—É
    const es = new EventSource(`${CHAT_SEARCH_SSE_URL}?${params.toString()}`);
    activeChatSearchEventSource = es; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    let finalPayload = null;

    // –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    es.addEventListener('status', (ev)=>{
      try{
        const data = JSON.parse(ev.data);
        const message = data.message || '';
        const type = data.type || '';
        
        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —è–∫—â–æ —î
        const oldStatus = bodyEl.querySelector('.status-message');
        if (oldStatus) {
          const parentDiv = oldStatus.closest('.assistant-message');
          if (parentDiv) parentDiv.remove();
        }
        
        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä—É–∂–µ—á–æ–∫ —è–∫—â–æ —î
        const oldLoader = bodyEl.querySelector('.dot-loader');
        if (oldLoader) {
          const parentDiv = oldLoader.closest('.assistant-message');
          if (parentDiv) parentDiv.remove();
        }
        
        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π shimmer —Ç–µ–∫—Å—Ç —è–∫—â–æ —î
        const oldShimmer = bodyEl.querySelector('.shimmer-text');
        if (oldShimmer) {
          const parentDiv = oldShimmer.closest('.assistant-message');
          if (parentDiv) parentDiv.remove();
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤–∏–π –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –∫—Ä—É–∂–µ—á–æ–∫ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (message) {
          const statusDiv = document.createElement('div');
          statusDiv.className = 'assistant-message';
          statusDiv.style.background = 'transparent';
          statusDiv.style.animation = 'none';
          // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          let statusText = '–î—É–º–∞—é';
          if (type === 'searching') {
            statusText = '–®—É–∫–∞—é —Ç–æ–≤–∞—Ä–∏';
          } else if (type === 'thinking') {
            statusText = '–î—É–º–∞—é';
          }
          statusDiv.innerHTML = `<!--<div class="dot-loader"></div>--><span class="loader-text shimmer-text">${statusText}</span>`;
          bodyEl.appendChild(statusDiv);
        }
      }catch(e){ console.warn('Status event error:', e); }
    });

    es.addEventListener('analysis', (ev)=>{
      // –ü–æ–¥—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ –µ—Ç–∞–ø–∏
    });

    es.addEventListener('candidates', (ev)=>{
      // –ü–æ–¥—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ –µ—Ç–∞–ø–∏
    });

    es.addEventListener('categories', (ev)=>{
      // –ü–æ–¥—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ –µ—Ç–∞–ø–∏
    });

    es.addEventListener('recommendations', (ev)=>{
      // –ü–æ–¥—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ –µ—Ç–∞–ø–∏
    });

    // –°—Ç—Ä—ñ–º ¬´–Ω–∞–±–æ—Ä—É¬ª –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–±–µ–∫–µ–Ω–¥ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ)
    let assistantMsg = null;
    let assistantTypingComplete = false;
    
    es.addEventListener('assistant_start', (ev)=>{
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–®—É–∫–∞—é —Ç–æ–≤–∞—Ä–∏" —Ç–∞ —Å—Ç–∞—Ç—É—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const searchingMessage = bodyEl.querySelector('.searching-message');
      if (searchingMessage) {
        const parentDiv = searchingMessage.closest('.assistant-message');
        if (parentDiv) {
          parentDiv.remove();
        } else {
          searchingMessage.remove();
        }
      }
      
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ("–î—É–º–∞—é...", "–®—É–∫–∞—é —Ç–æ–≤–∞—Ä–∏...")
      const statusMessage = bodyEl.querySelector('.status-message');
      if (statusMessage) {
        const parentDiv = statusMessage.closest('.assistant-message');
        if (parentDiv) {
          parentDiv.remove();
        } else {
          statusMessage.remove();
        }
      }
      
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –∫—Ä—É–∂–µ—á–æ–∫
      const dotLoader = bodyEl.querySelector('.dot-loader');
      if (dotLoader) {
        const parentDiv = dotLoader.closest('.assistant-message');
        if (parentDiv) {
          parentDiv.remove();
        } else {
          dotLoader.remove();
        }
      }
      
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ shimmer —Ç–µ–∫—Å—Ç ("–î—É–º–∞—é", "–®—É–∫–∞—é")
      const shimmerText = bodyEl.querySelector('.shimmer-text');
      if (shimmerText) {
        const parentDiv = shimmerText.closest('.assistant-message');
        if (parentDiv) {
          parentDiv.remove();
        } else {
          shimmerText.remove();
        }
      }
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
      assistantMsg = document.createElement('div');
      assistantMsg.className = 'assistant-message typing';
      assistantMsg.textContent = '';
      assistantMsg.dataset.rawText = '';
      bodyEl.appendChild(assistantMsg);
      
      // –ö–ª–∞—Å loading –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º –ø—ñ–¥ —á–∞—Å –¥—Ä—É–∫—É —Ç–µ–∫—Å—Ç—É GPT
    });
    
    es.addEventListener('assistant_delta', (ev)=>{
      try{
        const d = JSON.parse(ev.data);
        // –ü—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î–º–æ —Å–∏–º–≤–æ–ª (–±–µ–∫–µ–Ω–¥ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é)
        if (assistantMsg && d.text) {
          // –ù–∞–∫–æ–ø–∏—á—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ –æ–¥—Ä–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ \n –≤ <br> –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –¥—Ä—É–∫—É
          if (!assistantMsg.dataset.rawText) assistantMsg.dataset.rawText = '';
          assistantMsg.dataset.rawText += d.text;
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ innerHTML –∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é \n –≤ <br> —â–æ–± –Ω–æ–≤—ñ —Ä—è–¥–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –ø—ñ–¥ —á–∞—Å streaming
          assistantMsg.innerHTML = assistantMsg.dataset.rawText.replace(/\n/g, '<br>');
        }
      }catch(_){ }
    });
    
    es.addEventListener('assistant_end', (ev)=>{
      if (assistantMsg) {
        assistantMsg.classList.remove('typing');
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è \n –≤ <br> –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ –≤ assistant_delta, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞—î–º–æ dataset
        if (assistantMsg.dataset.rawText) {
          delete assistantMsg.dataset.rawText;
        }
      }
      assistantTypingComplete = true;
      
      // –Ø–∫—â–æ payload –≤–∂–µ –ø—Ä–∏–π—à–æ–≤, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –∫–∞—Ä—É—Å–µ–ª—å
      if (finalPayload) {
        renderCarouselAfterAssistant();
      }
    });

    es.addEventListener('final', (ev)=>{
      try{
        finalPayload = JSON.parse(ev.data);
        es.close();
        restoreSearchButton(); // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—à—É–∫—É
        
        // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        if (input?.value) {
          addToSearchHistory(input.value);
          console.log('üìú –î–æ–¥–∞–Ω–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó:', input.value, '| –í—Å—å–æ–≥–æ:', searchHistory.length);
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –∫–∞—Ä—É—Å–µ–ª—å –¢–Ü–õ–¨–ö–ò –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—Ä—É–∫—É —Ç–µ–∫—Å—Ç—É
        if (assistantTypingComplete) {
          renderCarouselAfterAssistant();
        }
      }catch(e){ 
        console.error('SSE final event error:', e); 
        es.close(); 
        restoreSearchButton(); // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      }
    });
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∫–∞—Ä—É—Å–µ–ª—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
    function renderCarouselAfterAssistant() {
      if (!finalPayload) return;
      
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å loading –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ç–æ–≤–∞—Ä—ñ–≤
      bodyEl.classList.remove('loading');
      
      // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
      setTimeout(() => {
        // –†–µ–Ω–¥–µ—Ä–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –∫–∞—Ä—É—Å–µ–ª—å (—Ç–µ–∫—Å—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤–∂–µ —î —á–µ—Ä–µ–∑ SSE)
        finalizeSectionWithoutTextTyping(bodyEl, {
          products: finalPayload.results || [],
          recommendations: finalPayload.recommendations || [],
          actions: finalPayload.actions || null
        });
        
        // –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        chatDialogContext = finalPayload.dialog_context || null;
        console.log('üì• –û–Ω–æ–≤–ª–µ–Ω–æ chatDialogContext:', chatDialogContext);
        
        // –õ–æ–≥—É—î–º–æ clarification_asked —è–∫—â–æ —î
        if (chatDialogContext?.clarification_asked) {
          console.warn('‚ö†Ô∏è chatDialogContext –º—ñ—Å—Ç–∏—Ç—å clarification_asked=true');
          console.warn('‚ö†Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç –ü–û–í–ò–ù–ï–ù –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤!');
        }
        
        // –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ–∫—Ü—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        try {
          const ctxEl = document.createElement('script');
          ctxEl.type = 'application/json';
          ctxEl.setAttribute('data-section-context','');
          
          // –í–∏—Ç—è–≥—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ actions
          const categoriesFromActions = Array.isArray(finalPayload.actions) 
            ? finalPayload.actions
                .filter(a => a?.type === 'button' && a?.action === 'select_category')
                .map(a => a.value)
            : [];
          
          const ctx = {
            available_categories: categoriesFromActions.length > 0 ? categoriesFromActions : (chatDialogContext?.available_categories || []),
            all_products: finalPayload.results || [],
            category_buckets: (chatDialogContext?.category_buckets || {}),
            current_filter: null,
            reco_ids: (finalPayload.recommendations || []).map(r => r.product_id),
            actions: finalPayload.actions  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ actions –∑ special –ø—Ä–∞–ø–æ—Ä—Ü—è–º–∏
          };
          ctxEl.textContent = JSON.stringify(ctx);
          section.appendChild(ctxEl);
        } catch(_) {}
        
        updateSelectedCards();
        if (sectionId === 1) showFooter();
      }, 300); // –ó–∞—Ç—Ä–∏–º–∫–∞ 300–º—Å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—Ä—É–∫—É —Ç–µ–∫—Å—Ç—É
    }

    let fallbackCalled = false;
    
    es.onerror = () => { 
      try{ es.close(); }catch(_){ } 
      restoreSearchButton(); // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ fallback —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
      if (!fallbackCalled) {
        fallbackCalled = true;
        // –í–∏–¥–∞–ª—è—î–º–æ —Å–µ–∫—Ü—ñ—é, —è–∫—É —Å—Ç–≤–æ—Ä–∏–ª–∏ –¥–ª—è SSE
        if (section && section.parentNode) {
          section.parentNode.removeChild(section);
        }
        // –ó–º–µ–Ω—à—É—î–º–æ chatStep –Ω–∞–∑–∞–¥, –±–æ –º–∏ –≤–∏–¥–∞–ª–∏–ª–∏ —Å–µ–∫—Ü—ñ—é
        chatStep--;
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π runChatRound, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏—Ç—å –Ω–æ–≤—É —Å–µ–∫—Ü—ñ—é
        runChatRound(input).catch(()=>{});
      }
    };
  }catch(e){
    console.error('SSE error:', e);
    // –í–∏–¥–∞–ª—è—î–º–æ —Å–µ–∫—Ü—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞
    if (section && section.parentNode) {
      section.parentNode.removeChild(section);
    }
    chatStep--;
    return runChatRound(input);
  }
}

// –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–∞—Ä—É—Å–µ–ª—å –≤ —ñ—Å–Ω—É—é—á—ñ–π —Å–µ–∫—Ü—ñ—ó (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ–π)
function updateCarouselInSection(section, { products, recommendations = [] }) {
  const body = section.querySelector('.query-body');
  body.classList.remove('loading');
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (—è–∫—â–æ —î)
  const existingCategoriesWrap = body.querySelector('.categories-wrap');
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ—Å–Ω—É—é—á—É –∫–∞—Ä—É—Å–µ–ª—å –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
  let existingCarousel = body.querySelector('.carousel-container');
  if (!existingCarousel) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ
    existingCarousel = document.createElement('div');
    existingCarousel.className = 'carousel-container';
    
    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø—ñ—Å–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (—è–∫—â–æ —î) –∞–±–æ –≤ –∫—ñ–Ω–µ—Ü—å
    if (existingCategoriesWrap) {
      existingCategoriesWrap.after(existingCarousel);
    } else {
      body.appendChild(existingCarousel);
    }
  }
  
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó/–ø—ñ–¥–∫–∞–∑–∫–∏, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞–ª–∏—Å—å
  existingCarousel.querySelectorAll('.carousel-nav-btn, .carousel-hint').forEach(el => el.remove());

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å
  let carousel = existingCarousel.querySelector('.products-carousel');
  if (!carousel) {
    carousel = document.createElement('div');
    carousel.className = 'products-carousel compact';
    existingCarousel.appendChild(carousel);
    
    // –î–æ–¥–∞—î–º–æ drag scroll —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    addDragScrollToCarousel(carousel);
  }
  
  // –û–±'—î–¥–Ω–∞—Ç–∏: —Å–ø–æ—á–∞—Ç–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ, –ø–æ—Ç—ñ–º —Ä–µ—à—Ç–∞
  let recoIds = Array.isArray(recommendations) ? recommendations.map(r => r.product_id) : [];
  if (!recoIds.length) {
    try {
      const ctxEl = section.querySelector('script[type="application/json"][data-section-context]');
      const sectionCtx = ctxEl ? JSON.parse(ctxEl.textContent || '{}') : null;
      if (Array.isArray(sectionCtx?.reco_ids)) {
        recoIds = sectionCtx.reco_ids;
      }
    } catch(_) {}
  }
  const mergedProducts = (() => {
    if (!Array.isArray(products) || products.length === 0) return [];
    const byId = new Map(products.map(p => [p.id, p]));
    const recommended = recoIds.map(id => byId.get(id)).filter(Boolean);
    const remaining = products.filter(p => !recoIds.includes(p.id));
    return [...recommended, ...remaining];
  })();
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ sortedProducts –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–∑–∞ –±–ª–æ–∫–∞–º–∏
  const sortedProducts = mergedProducts;

  if (mergedProducts.length === 0) {
    carousel.innerHTML = `<div class="result-placeholder"><p>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p></div>`;
  } else {
    // –ü–æ–∫–∞–∑—É—î–º–æ –í–°–Ü —Ç–æ–≤–∞—Ä–∏: —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Å–ø–æ—á–∞—Ç–∫—É

    carousel.innerHTML = '';

    sortedProducts.forEach((p) => {
      const card = document.createElement('div');
      card.className = 'product-card';
      card.dataset.id = p.id;
      card.dataset.uuid = p.uuid;

      // –ö–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—Ü—ñ ‚Äî —è–∫ —É –æ—Å–Ω–æ–≤–Ω—ñ–π –∫–∞—Ä—É—Å–µ–ª—ñ
      card.onclick = async (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (card.classList.contains('loading')) return;
        await toggleCartItem(p);
      };

      const isRecommended = recoIds.includes(p.id);
      const recommendationBadge = isRecommended ? '<div class="recommendation-badge">‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ</div>' : '';

      card.innerHTML = `
        ${recommendationBadge}
        <div class="product-image-container">
          <div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
        </div>
        <div class="product-details">
          <h3>${escapeHTML(p.title_ua||'–ë–µ–∑ –Ω–∞–∑–≤–∏')}</h3>
          <p>${escapeHTML((p.description_ua||'').slice(0,100))}...</p>
          <div class="product-pricing-info">
            <div class="rating-placeholder"></div>
            <div class="price-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏...</div>
          </div>
        </div>`;

      carousel.appendChild(card);

      // –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —è–∫ —É –æ—Å–Ω–æ–≤–Ω—ñ–π –∫–∞—Ä—É—Å–µ–ª—ñ
      card.classList.add('loading');

      const priceElement = card.querySelector('.price-placeholder');
      const ratingElement = card.querySelector('.rating-placeholder');
      const imageElement = card.querySelector('.product-image-container');

      // –î–æ–¥–∞—î–º–æ good_code —è–∫ data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è lazy loading
      imageElement.dataset.goodCode = p.good_code;
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ observer —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–∏–π
      initImageObserver();
      
      // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ observer –¥–ª—è lazy loading
      imageObserver.observe(imageElement);

      Promise.all([
        loadProductPrice(priceElement, p.good_code, p),
        loadProductRating(ratingElement, p.good_code, p)
      ]).finally(() => {
        card.classList.remove('loading');
      });
    });
  }
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  const prevBtn = document.createElement('button');
  prevBtn.className = 'carousel-nav-btn prev';
  prevBtn.innerHTML = '‚Äπ';
  prevBtn.onclick = () => scrollCarousel(carousel, 'prev');

  const nextBtn = document.createElement('button');
  nextBtn.className = 'carousel-nav-btn next';
  nextBtn.innerHTML = '‚Ä∫';
  nextBtn.onclick = () => scrollCarousel(carousel, 'next');

  // hint removed

  existingCarousel.appendChild(prevBtn);
  existingCarousel.appendChild(nextBtn);

  carousel.addEventListener('scroll', () => updateCarouselState(carousel, prevBtn, nextBtn));
  // –ø—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –∫–∞—Ä—É—Å–µ–ª—ñ
  try { carousel.scrollTo({ left: 0, behavior: 'auto' }); } catch(_) { carousel.scrollLeft = 0; }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ü–ï–†–ï–î –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
  updateCategoryButtons(body);
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ –ü–û–°–õ–Ø —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î)
  if (!existingCarousel.querySelector('.carousel-expand-container')) {
    const expandContainer = createExpandToggleButton(existingCarousel, sortedProducts.length);
    existingCarousel.appendChild(expandContainer);
  } else {
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –≤ —ñ—Å–Ω—É—é—á—ñ–π –∫–Ω–æ–ø—Ü—ñ
    const existingBtn = existingCarousel.querySelector('.expand-toggle-btn');
    if (existingBtn) {
      existingBtn.innerHTML = `–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ (${sortedProducts.length}) <span class="expand-icon">‚Üì</span>`;
    }
  }
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ –∑ sessionStorage
  restoreCarouselState(existingCarousel);

  // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–í–≥–æ—Ä—É"
  if (typeof updateBackToTopVisibility === 'function') {
    try { updateBackToTopVisibility(); } catch(_){}
  }
}

// –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤ —ñ—Å–Ω—É—é—á—ñ–π —Å–µ–∫—Ü—ñ—ó
function resolveCategoryCodeAndLabel(value) {
  const raw = String(value || '').trim();
  if (CATEGORY_SCHEMA[raw]) {
    return { code: raw, label: CATEGORY_SCHEMA[raw].label || raw };
  }
  // try match by label
  for (const [code, data] of Object.entries(CATEGORY_SCHEMA)) {
    if ((data?.label || '').toLowerCase() === raw.toLowerCase()) {
      return { code, label: data.label || code };
    }
  }
  return { code: raw, label: raw };
}

function updateCategoryButtons(body) {
  console.log('üîÑ updateCategoryButtons: –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–æ–∫ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
  let existingButtons = body.querySelector('.categories-wrap');
  if (!existingButtons) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    existingButtons = document.createElement('div');
    existingButtons.className = 'categories-wrap';
    existingButtons.style.cssText = 'display:flex;flex-wrap:wrap;gap:8px;margin:10px 0 6px 0;';
    
    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–µ—Ä–µ–¥ –∫–∞—Ä—É—Å–µ–ª–ª—é
    const carouselContainer = body.querySelector('.carousel-container');
    if (carouselContainer) {
      body.insertBefore(existingButtons, carouselContainer);
    } else {
      body.appendChild(existingButtons);
    }
    console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ–π');
  } else {
    console.log('‚ôªÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ–π');
  }
  
  // –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∫–Ω–æ–ø–∫–∏
  existingButtons.innerHTML = '';
  
  // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
  existingButtons.innerHTML = '<div style="font-size:12px;color:#666;margin-right:8px;align-self:center;">–§—ñ–ª—å—Ç—Ä–∏:</div>';
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –±–µ—Ä—É—Ç—å—Å—è –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –°–ï–ö–¶–Ü–á, —è–∫—â–æ –≤—ñ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É DOM
  const section = body.closest('.query-section');
  const sectionContextEl = section ? section.querySelector('script[type="application/json"][data-section-context]') : null;
  let sectionCtx = null;
  try { sectionCtx = sectionContextEl ? JSON.parse(sectionContextEl.textContent || '{}') : null; } catch(_) { sectionCtx = null; }

  console.log('üîç sectionCtx:', sectionCtx);
  console.log('üîç chatDialogContext:', chatDialogContext);

  const available = (sectionCtx && Array.isArray(sectionCtx.available_categories)) ? sectionCtx.available_categories : (chatDialogContext && Array.isArray(chatDialogContext.available_categories) ? chatDialogContext.available_categories : []);
  const currentFilter = sectionCtx && typeof sectionCtx.current_filter !== 'undefined' ? sectionCtx.current_filter : chatDialogContext?.current_filter;
  const actions = (sectionCtx && Array.isArray(sectionCtx.actions)) ? sectionCtx.actions : (chatDialogContext && Array.isArray(chatDialogContext.actions) ? chatDialogContext.actions : []);

  console.log('üìã available categories:', available);
  console.log('üéØ current filter:', currentFilter);
  console.log('‚ö° actions:', actions);

  if (available && available.length > 0) {
    available.forEach(v => {
      const { code, label } = resolveCategoryCodeAndLabel(v);
      const isActive = currentFilter === code;
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É action —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ special –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
      const action = actions.find(a => a?.value === v || a?.label === v);
      const isRecommended = action?.special === 'recommended';
      
      const btn = document.createElement('button');
      btn.textContent = label;
      
      // –û—Å–æ–±–ª–∏–≤–∏–π —Å—Ç–∏–ª—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ"
      if (isRecommended && !isActive) {
        btn.style.cssText = 'background:linear-gradient(135deg, #ffd24d 0%, #ffb84d 100%);border:none;border-radius:18px;padding:8px 16px;cursor:pointer;font-size:13px;font-weight:600 !important;color:#000;box-shadow:0 2px 8px rgba(255,210,77,0.4);user-select:none;-webkit-user-select:none;transition:all 0.2s ease;';
        btn.onmouseenter = () => btn.style.transform = 'translateY(-1px)';
        btn.onmouseleave = () => btn.style.transform = 'translateY(0)';
      } else if (isActive) {
        btn.style.cssText = 'background:#ffd24d;border:none;border-radius:18px;padding:8px 12px;cursor:pointer;font-size:13px;font-weight:400 !important;user-select:none;-webkit-user-select:none;';
      } else {
        btn.style.cssText = 'background:#fff;border:1px solid #e0e0e0;border-radius:18px;padding:8px 12px;cursor:pointer;font-size:13px;font-weight:400 !important;user-select:none;-webkit-user-select:none;';
      }
      
      btn.onclick = () => runChatRound({ type: 'category', value: code, valueLabel: label, sectionId: section ? Number(section.dataset.step) : undefined });
      existingButtons.appendChild(btn);
    });
    existingButtons.style.display = 'flex';
  } else {
    // –•–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–µ–º–∞—î
    existingButtons.style.display = 'none';
    console.warn('‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
  }
}

// –ù–∞–¥—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ GPT-–ø—ñ–¥–∫–∞–∑–æ–∫ —ñ–∑ –ø–æ–≤—Ç–æ—Ä–æ–º
async function fetchChatAnalysisPayload({ input, dialog_context = null, retries = 2 } = {}){
  const isCategory = input?.type === 'category';
  const requestData = {
    query: isCategory ? (dialog_context?.original_query || '') : (input?.value || ''),
    search_history: getSearchHistory(),
    session_id: `session_${Date.now()}`,
    k: 100,
    dialog_context: dialog_context || undefined,
    selected_category: isCategory ? input.value : undefined,
  };
  
  // –ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É
  
  let lastError;
  for(let attempt=0; attempt<=retries; attempt++){
    try{
      const t0 = performance.now();
      const res = await fetch(CHAT_SEARCH_API_URL, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(requestData)
      });
      if(!res.ok){
        const msg = await res.text().catch(()=>`status ${res.status}`);
        throw new Error(`HTTP ${res.status}: ${msg}`);
      }
      const data = await res.json();
      const duration = Math.round(performance.now() - t0);
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      console.log(`‚úÖ –ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}ms`);
      console.log(`üìä –ú–µ—Ç–æ–¥: üîÄ Hybrid Search (Semantic + BM25)`);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ GPT
      if (data.query_analysis) {
        console.log('üß† GPT –ê–ù–ê–õ–Ü–ó –ó–ê–ü–ò–¢–£:');
        console.log(`   üìù –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç: "${data.query_analysis.original_query}"`);
        console.log(`   üí≠ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∑–∞–ø–∏—Ç: "${data.query_analysis.expanded_query}"`);
        console.log(`   üéØ –ù–∞–º—ñ—Ä: ${data.query_analysis.intent_description || '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}`);
        console.log(`   üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: [${data.query_analysis.keywords?.join(', ') || '–Ω–µ–º–∞—î'}]`);
        
        if (data.query_analysis.semantic_subqueries && data.query_analysis.semantic_subqueries.length > 0) {
          console.log(`   üîç –°–ï–ú–ê–ù–¢–ò–ß–ù–Ü –ü–Ü–î–ó–ê–ü–ò–¢–ò (${data.query_analysis.semantic_subqueries.length}):`);
          data.query_analysis.semantic_subqueries.forEach((subquery, index) => {
            console.log(`      ${index + 1}. "${subquery}"`);
          });
        } else {
          console.log('   ‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–Ω—ñ –ø—ñ–¥–∑–∞–ø–∏—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ');
        }
      }
      
      if (data.stage_timings_ms) {
        console.log('‚è±Ô∏è –¢–∞–π–º—ñ–Ω–≥–∏ –µ—Ç–∞–ø—ñ–≤:');
        console.table(data.stage_timings_ms);
      }
      console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${data.results?.length || 0}`);
      console.log(`‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π GPT: ${data.recommendations?.length || 0}`);
      
      return data;
    }catch(err){
      lastError = err;
      console.warn(`‚ö†Ô∏è –°–ø—Ä–æ–±–∞ ${attempt + 1}/${retries + 1} –Ω–µ –≤–¥–∞–ª–∞—Å—è:`, err.message);
      // –ù–µ–≤–µ–ª–∏–∫–∞ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
      const backoff = 200 * Math.pow(2, attempt);
      await new Promise(r=>setTimeout(r, backoff));
    }
  }
  throw lastError || new Error('Unknown GPT recommendations error');
}


// --- –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–®—É–∫–∞—é —Ç–æ–≤–∞—Ä–∏" ---
function showSearchingMessage(bodyEl) {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ GPT –≤ —Å—Ç–∏–ª—ñ —á–∞—Ç-–±–∞–±–ª–∞ –∑ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–º –∫—Ä—É–∂–µ—á–∫–æ–º
  const searchingDiv = document.createElement('div');
  searchingDiv.className = 'assistant-message';
  searchingDiv.style.background = 'transparent';
  searchingDiv.style.animation = 'none';
  searchingDiv.innerHTML = `
    <!--<div class="dot-loader"></div>--><span class="loader-text shimmer-text">–®—É–∫–∞—é</span>
  `;
  bodyEl.appendChild(searchingDiv);
}

// --- –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü—ñ—ó (–ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ / —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è / –ø–æ–º–∏–ª–∫–∞) ---
function renderPendingSection(step, userText){
  const wrap = document.createElement('div');
  wrap.className = 'query-section';
  wrap.dataset.step = step;
  wrap.innerHTML = `
    <div class="query-header">
      <span class="query-pill" title="–í–∞—à –∑–∞–ø–∏—Ç" style="margin-left:auto;">${escapeHTML(userText)}</span>
    </div>
    <div class="query-body" id="qbody-${step}">
    </div>
  `;
  chatThread.appendChild(wrap);

  // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –º–µ—Å—Ç—É, –≥–¥–µ –≤—Å–∫–æ—Ä–µ –±—É–¥—É—Ç —Ç–æ–≤–∞—Ä–∏ (–±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏)
  const bodyEl = wrap.querySelector('.query-body');
  bodyEl.classList.add('loading');

  if (FEATURE_CHAT_AUTOSCROLL) {
    setTimeout(() => {
      scrollToFutureSpot(wrap, { first: step === 1 });
    }, 30);
  }

  return wrap;
}
function scrollToFutureSpot(sectionEl, opts = {}) {
  // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ —Ç–∞–∫, —â–æ–± –≤–µ—Ä—Ö —Å–µ–∫—Ü—ñ—ó —Å—Ç–∞–≤ –æ–¥—Ä–∞–∑—É –ø—ñ–¥ —Ö–µ–¥–µ—Ä–æ–º
  const header = document.querySelector('.tda-header');
  const headerOffset = (header && header.offsetHeight) ? header.offsetHeight : 0;
  const safetyMargin = 12; // –Ω–µ–≤–µ–ª–∏–∫–∏–π –≤—ñ–¥—Å—Ç—É–ø –≤—ñ–¥ —Ö–µ–¥–µ—Ä–∞

  const sectionTop = sectionEl.getBoundingClientRect().top + window.pageYOffset;
  let targetY = sectionTop - headerOffset - safetyMargin;

  // –ö–ª–∞–ø –Ω–∞ –º–µ–∂—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —â–æ–± –Ω–µ "–ø–µ—Ä–µ—Å—Ç—Ä–∏–±—É–≤–∞—Ç–∏"
  const maxY = Math.max(0, (document.documentElement.scrollHeight || document.body.scrollHeight) - window.innerHeight);
  if (targetY > maxY) targetY = maxY;
  if (targetY < 0) targetY = 0;

  window.scrollTo({ top: targetY, behavior: 'smooth' });
}

async function finalizeSection(section,{advice,products,recommendations = [], actions = null, needsInput = false}){
  const body = section.querySelector('.query-body');
  body.classList.remove('loading');
  
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–®—É–∫–∞—é —Ç–æ–≤–∞—Ä–∏" –∫–æ–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–π—à–ª–∞ —Ç–æ–≤–∞—Ä–∏
  const searchingMessage = body.querySelector('.searching-message');
  if (searchingMessage) {
    searchingMessage.remove();
  }
  
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –∫—Ä—É–∂–µ—á–æ–∫
  const dotLoader = body.querySelector('.dot-loader');
  if (dotLoader) {
    const parentDiv = dotLoader.closest('.assistant-message');
    if (parentDiv) {
      parentDiv.remove();
    } else {
      dotLoader.remove();
    }
  }
  
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ shimmer —Ç–µ–∫—Å—Ç ("–î—É–º–∞—é", "–®—É–∫–∞—é")
  const shimmerText = body.querySelector('.shimmer-text');
  if (shimmerText) {
    const parentDiv = shimmerText.closest('.assistant-message');
    if (parentDiv) {
      parentDiv.remove();
    } else {
      shimmerText.remove();
    }
  }
  
  // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
  body.innerHTML='';

  // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ SSE-–¥—Ä—É–∫–æ–º
  const assistantMsg = document.createElement('div');
  assistantMsg.className = 'assistant-message typing';
  assistantMsg.textContent = '';
  body.appendChild(assistantMsg);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä—É —Ä–µ—à—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É (–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó/–∫–∞—Ä—É—Å–µ–ª—å) –ü–Ü–°–õ–Ø –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—Ä—É–∫—É
  const renderRest = () => {
    // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π - –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä—è–¥
    let categoriesToShow = [];
    
    // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó), –ø–æ—Ç—ñ–º actions (–¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—à—É–∫—É)
    if (chatDialogContext && chatDialogContext.available_categories && chatDialogContext.available_categories.length > 0) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
      categoriesToShow = chatDialogContext.available_categories.map(catCode => ({
        code: catCode,
        label: CATEGORY_SCHEMA[catCode]?.label || catCode,
        isActive: chatDialogContext.current_filter === catCode
      }));
    } else if (Array.isArray(actions) && actions.length > 0) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ actions –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—à—É–∫—É
      categoriesToShow = actions
        .filter(action => action?.type === 'button' && action?.action === 'select_category')
        .map(action => ({
          code: action.value,
          label: action.label || action.value,
          isActive: false
        }));
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    if (categoriesToShow.length > 0) {
      const categoriesWrap = document.createElement('div');
      categoriesWrap.className = 'categories-wrap';
      categoriesWrap.style.cssText='display:flex;flex-wrap:wrap;gap:8px;margin:10px 0 6px 0;';
      
      // –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–§—ñ–ª—å—Ç—Ä–∏:"
      categoriesWrap.innerHTML = '<div style="font-size:12px;color:#666;margin-right:8px;align-self:center;">–§—ñ–ª—å—Ç—Ä–∏:</div>';
      
      categoriesToShow.forEach(cat => {
        const btn = document.createElement('button');
        btn.textContent = cat.label;
        btn.style.cssText = cat.isActive 
          ? 'background:#ffd24d;border:none;border-radius:18px;padding:8px 12px;cursor:pointer;font-size:13px;font-weight:normal;user-select:none;-webkit-user-select:none;'
          : 'background:#fff;border:1px solid #e0e0e0;border-radius:18px;padding:8px 12px;cursor:pointer;font-size:13px;font-weight:normal;user-select:none;-webkit-user-select:none;';
        const parentSection = body.closest('.query-section');
        const stepId = parentSection ? Number(parentSection.dataset.step) : undefined;
        btn.onclick = () => runChatRound({ type: 'category', value: cat.code, valueLabel: cat.label, sectionId: stepId });
        // –î–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–º–∏–∫–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –ø—Ä–∏ mousedown/drag
        btn.addEventListener('mousedown', (e) => { e.preventDefault(); });
        categoriesWrap.appendChild(btn);
      });
      body.appendChild(categoriesWrap);
    }

    // –Ø–∫—â–æ –Ω–µ–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å
    if (!products || products.length === 0) {
      return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    const carouselContainer = document.createElement('div');
    carouselContainer.className = 'carousel-container';
    
    const carousel=document.createElement('div');
    carousel.className='products-carousel compact';
    
    // –î–æ–¥–∞—î–º–æ drag scroll —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    addDragScrollToCarousel(carousel);
    
    let totalProductsCount = 0; // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–æ–≤–Ω—ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –ø—ñ–∑–Ω—ñ—à–µ
    
    if(products.length===0){
      carousel.innerHTML=`<div class="result-placeholder"><p>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p></div>`;
    }else{
      // –ü–æ–∫–∞–∑—É—î–º–æ –í–°–Ü —Ç–æ–≤–∞—Ä–∏: —Å–ø–µ—Ä—à—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ
      const recoIds = Array.isArray(recommendations) ? recommendations.map(r => r.product_id) : [];
      const byId = new Map(products.map(p => [p.id, p]));
      const recommended = recoIds.map(id => byId.get(id)).filter(Boolean);
      const remaining = products.filter(p => !recoIds.includes(p.id));
      const sortedProducts = [...recommended, ...remaining];
      totalProductsCount = sortedProducts.length; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è expandButton
      
      sortedProducts.forEach((p, index)=>{
        const card=document.createElement('div');
        card.className='product-card';
        card.dataset.id=p.id;
        card.dataset.uuid=p.uuid;
        
        // –î–æ–¥–∞—î–º–æ –∫–ª—ñ–∫ –Ω–∞ –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
        card.onclick = async (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
          if (card.classList.contains('loading')) {
            return;
          }
          
          await toggleCartItem(p);
        };
        
        // –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        const isRecommended = recoIds.includes(p.id);
        const recommendationBadge = isRecommended ? '<div class="recommendation-badge">‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ</div>' : '';
        
        card.innerHTML=`
          ${recommendationBadge}
          <div class="product-image-container">
            <div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
          </div>
          <div class="product-details">
            <h3>${escapeHTML(p.title_ua||'–ë–µ–∑ –Ω–∞–∑–≤–∏')}</h3>
            <p>${escapeHTML((p.description_ua||'').slice(0,100))}...</p>
            <div class="product-pricing-info">
              <div class="rating-placeholder"></div>
              <div class="price-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏...</div>
            </div>
          </div>`;
        carousel.appendChild(card);
        
        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        card.classList.add('loading');
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        const priceElement = card.querySelector('.price-placeholder');
        const ratingElement = card.querySelector('.rating-placeholder');
        const imageElement = card.querySelector('.product-image-container');
        
        // –î–æ–¥–∞—î–º–æ good_code —è–∫ data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è lazy loading
        imageElement.dataset.goodCode = p.good_code;
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ observer —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–∏–π
        initImageObserver();
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ observer –¥–ª—è lazy loading
        imageObserver.observe(imageElement);
        
        // Found elements for chat product
        Promise.all([
          loadProductPrice(priceElement, p.good_code, p),
          loadProductRating(ratingElement, p.good_code, p)
        ]).finally(() => {
          // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
          card.classList.remove('loading');
        });
      });
    }
    
    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    const prevBtn = document.createElement('button');
    prevBtn.className = 'carousel-nav-btn prev';
    prevBtn.innerHTML = '‚Äπ';
    prevBtn.onclick = () => scrollCarousel(carousel, 'prev');
    
    const nextBtn = document.createElement('button');
    nextBtn.className = 'carousel-nav-btn next';
    nextBtn.innerHTML = '‚Ä∫';
    nextBtn.onclick = () => scrollCarousel(carousel, 'next');
    
    // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ
    
    // –°–∫–ª–∞–¥–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º (—Ö—ñ–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ)
    carouselContainer.appendChild(prevBtn);
    carouselContainer.appendChild(nextBtn);
    carouselContainer.appendChild(carousel);
    
    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ (—è–∫—â–æ —î —Ç–æ–≤–∞—Ä–∏)
    if (totalProductsCount > 0) {
      const expandContainer = createExpandToggleButton(carouselContainer, totalProductsCount);
      carouselContainer.appendChild(expandContainer);
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
    carousel.addEventListener('scroll', () => updateCarouselState(carousel, prevBtn, nextBtn));
    
    body.appendChild(carouselContainer);
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ –∑ sessionStorage
    restoreCarouselState(carouselContainer);

    // –ë–ª–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π AI –ø—Ä–∏–±—Ä–∞–Ω–æ –∑–∞ –≤–∏–º–æ–≥–æ—é
  };

  // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ–¥—Ä–∞–∑—É –±–µ–∑ –µ—Ñ–µ–∫—Ç—É –¥—Ä—É–∫—É
  const messageText = advice || '–û—Å—å –ø—ñ–¥—ñ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏.';
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ \n –≤ <br>
  assistantMsg.innerHTML = messageText.replace(/\n/g, '<br>');
  assistantMsg.classList.remove('typing');
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –∫–∞—Ä—É—Å–µ–ª—å –æ–¥—Ä–∞–∑—É
  renderRest();
}

// –§—ñ–Ω–∞–ª—å–Ω–∞ —Å–µ–∫—Ü—ñ—è –ë–ï–ó –¥—Ä—É–∫—É —Ç–µ–∫—Å—Ç—É (–¥–ª—è SSE-—Ä–µ–∂–∏–º—É, —Ç–µ–∫—Å—Ç –≤–∂–µ —î)
function finalizeSectionWithoutTextTyping(bodyEl, {products, recommendations = [], actions = null}){
  // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  let categoriesToShow = [];
  
  if (chatDialogContext && chatDialogContext.available_categories && chatDialogContext.available_categories.length > 0) {
    categoriesToShow = chatDialogContext.available_categories.map(catCode => ({
      code: catCode,
      label: CATEGORY_SCHEMA[catCode]?.label || catCode,
      isActive: chatDialogContext.current_filter === catCode
    }));
  } else if (Array.isArray(actions) && actions.length > 0) {
    categoriesToShow = actions
      .filter(action => action?.type === 'button' && action?.action === 'select_category')
      .map(action => ({
        code: action.value,
        label: action.label || action.value,
        isActive: false
      }));
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
  if (categoriesToShow.length > 0) {
    const categoriesWrap = document.createElement('div');
    categoriesWrap.className = 'categories-wrap';
    categoriesWrap.style.cssText='display:flex;flex-wrap:wrap;gap:8px;margin:10px 0 6px 0;';
    
    // –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–§—ñ–ª—å—Ç—Ä–∏:"
    categoriesWrap.innerHTML = '<div style="font-size:12px;color:#666;margin-right:8px;align-self:center;">–§—ñ–ª—å—Ç—Ä–∏:</div>';
    
    categoriesToShow.forEach(cat => {
      const btn = document.createElement('button');
      btn.textContent = cat.label;
        btn.style.cssText = cat.isActive 
          ? 'background:#ffd24d;border:none;border-radius:18px;padding:8px 12px;cursor:pointer;font-size:13px;font-weight:normal;user-select:none;'
          : 'background:#fff;border:1px solid #e0e0e0;border-radius:18px;padding:8px 12px;cursor:pointer;font-size:13px;font-weight:normal;user-select:none;';
      const parentSection = bodyEl.closest('.query-section');
      const stepId = parentSection ? Number(parentSection.dataset.step) : undefined;
      btn.onclick = () => runChatRound({ type: 'category', value: cat.code, valueLabel: cat.label, sectionId: stepId });
      btn.addEventListener('mousedown', (e) => { e.preventDefault(); });
      categoriesWrap.appendChild(btn);
    });
    bodyEl.appendChild(categoriesWrap);
  }

  // –ö–∞—Ä—É—Å–µ–ª—å (–∫–æ–ø—ñ—é—î–º–æ –ª–æ–≥—ñ–∫—É –∑ renderRest)
  if (!products || products.length === 0) return;

  const carouselContainer = document.createElement('div');
  carouselContainer.className = 'carousel-container';
  
  const carousel = document.createElement('div');
  carousel.className = 'products-carousel compact';
  addDragScrollToCarousel(carousel);
  
  const recoIds = Array.isArray(recommendations) ? recommendations.map(r => r.product_id) : [];
  const byId = new Map(products.map(p => [p.id, p]));
  const recommended = recoIds.map(id => byId.get(id)).filter(Boolean);
  const remaining = products.filter(p => !recoIds.includes(p.id));
  const sortedProducts = [...recommended, ...remaining];
  
  sortedProducts.forEach((p)=>{
    const card = document.createElement('div');
    card.className = 'product-card';
    card.dataset.id = p.id;
    card.dataset.uuid = p.uuid;
    
    card.onclick = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (card.classList.contains('loading')) return;
      await toggleCartItem(p);
    };
    
    const isRecommended = recoIds.includes(p.id);
    const recommendationBadge = isRecommended ? '<div class="recommendation-badge">‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ</div>' : '';
    
    card.innerHTML=`
      ${recommendationBadge}
      <div class="product-image-container"><div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div></div>
      <div class="product-details">
        <h3>${escapeHTML(p.title_ua||'–ë–µ–∑ –Ω–∞–∑–≤–∏')}</h3>
        <p>${escapeHTML((p.description_ua||'').slice(0,100))}...</p>
        <div class="product-pricing-info">
          <div class="rating-placeholder"></div>
          <div class="price-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏...</div>
        </div>
      </div>`;
    carousel.appendChild(card);
    card.classList.add('loading');
    
    const priceElement = card.querySelector('.price-placeholder');
    const ratingElement = card.querySelector('.rating-placeholder');
    const imageElement = card.querySelector('.product-image-container');
    
    // –î–æ–¥–∞—î–º–æ good_code —è–∫ data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è lazy loading
    imageElement.dataset.goodCode = p.good_code;
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ observer —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–∏–π
    initImageObserver();
    
    // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ observer –¥–ª—è lazy loading
    imageObserver.observe(imageElement);
    
    Promise.all([
      loadProductPrice(priceElement, p.good_code, p),
      loadProductRating(ratingElement, p.good_code, p)
    ]).finally(() => {
      card.classList.remove('loading');
    });
  });
  
  const prevBtn = document.createElement('button');
  prevBtn.className = 'carousel-nav-btn prev';
  prevBtn.innerHTML = '‚Äπ';
  prevBtn.onclick = () => scrollCarousel(carousel, 'prev');
  
  const nextBtn = document.createElement('button');
  nextBtn.className = 'carousel-nav-btn next';
  nextBtn.innerHTML = '‚Ä∫';
  nextBtn.onclick = () => scrollCarousel(carousel, 'next');
  
  // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ
  
  carouselContainer.appendChild(prevBtn);
  carouselContainer.appendChild(nextBtn);
  carouselContainer.appendChild(carousel);
  
  // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ –ü–û–°–õ–Ø —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
  const expandContainer = createExpandToggleButton(carouselContainer, sortedProducts.length);
  carouselContainer.appendChild(expandContainer);
  
  carousel.addEventListener('scroll', () => updateCarouselState(carousel, prevBtn, nextBtn));
  bodyEl.appendChild(carouselContainer);
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–∞—Ä—É—Å–µ–ª—ñ –∑ sessionStorage
  restoreCarouselState(carouselContainer);
}

// --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ ---
function scrollCarousel(carousel, direction) {
  const cards = carousel.querySelectorAll('.product-card');
  if (cards.length === 0) return;
  
  // –í–∏–º—ñ—Ä—é—î–º–æ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∫–∞—Ä—Ç–∫–∞–º–∏
  let cardSpacing = 218; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 210 (—à–∏—Ä–∏–Ω–∞) + 8 (gap)
  
  if (cards.length >= 2) {
    // –í–∏–º—ñ—Ä—é—î–º–æ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –ø–æ—á–∞—Ç–∫–∞–º–∏ –ø–µ—Ä—à–∏—Ö –¥–≤–æ—Ö –∫–∞—Ä—Ç–æ–∫
    const firstCardRect = cards[0].getBoundingClientRect();
    const secondCardRect = cards[1].getBoundingClientRect();
    cardSpacing = secondCardRect.left - firstCardRect.left;
  }
  
  const cardsToScroll = 3;
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é
  const currentScroll = carousel.scrollLeft;
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ—ó "–ø–µ—Ä—à–æ—ó" –≤–∏–¥–∏–º–æ—ó –∫–∞—Ä—Ç–∫–∏
  const currentCardIndex = Math.round(currentScroll / cardSpacing);
  
  let targetCardIndex;
  
  if (direction === 'prev') {
    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –Ω–∞–∑–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç–∫–∏
    targetCardIndex = Math.max(0, currentCardIndex - cardsToScroll);
  } else {
    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 3 –∫–∞—Ä—Ç–∫–∏
    targetCardIndex = Math.min(cards.length - 1, currentCardIndex + cardsToScroll);
  }
  
  // –û–±—á–∏—Å–ª—é—î–º–æ —Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é —Ü—ñ–ª—å–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏
  const targetScroll = targetCardIndex * cardSpacing;
  
  // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ —Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
  carousel.scrollTo({ left: targetScroll, behavior: 'smooth' });
}

// –§—É–Ω–∫—Ü—ñ—è scrollToPage –≤–∏–¥–∞–ª–µ–Ω–∞ - —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è

function updateCarouselState(carousel, prevBtn, nextBtn) {
  const scrollLeft = carousel.scrollLeft;
  const maxScroll = carousel.scrollWidth - carousel.clientWidth;
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
  prevBtn.disabled = scrollLeft <= 0;
  nextBtn.disabled = scrollLeft >= maxScroll - 10; // –Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ–ø—É—Å–∫
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ –∑ –ø–ª–∞–≤–Ω–æ—é –∞–Ω—ñ–º–∞—Ü—ñ—î—é
function toggleCarouselView(carouselContainer) {
  const carousel = carouselContainer.querySelector('.products-carousel');
  const toggleBtn = carouselContainer.querySelector('.expand-toggle-btn');
  const prevBtn = carouselContainer.querySelector('.carousel-nav-btn.prev');
  const nextBtn = carouselContainer.querySelector('.carousel-nav-btn.next');
  
  if (!carousel || !toggleBtn) return;
  
  const isExpanded = carousel.classList.contains('expanded');
  const cards = Array.from(carousel.querySelectorAll('.product-card'));
  
  // –ë–ª–æ–∫—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó
  if (carousel.classList.contains('animating')) return;
  carousel.classList.add('animating');
  
  if (isExpanded) {
    // ========== –ó–ì–û–†–¢–ê–ù–ù–Ø ==========
    
    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ–∫ –¥–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    cards.forEach((card, index) => {
      card.style.opacity = '0';
      card.style.transform = 'scale(0.95)';
    });
    
    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å expanded
    carousel.classList.remove('expanded');
    toggleBtn.classList.remove('expanded');
    toggleBtn.innerHTML = '–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ <span class="expand-icon">‚Üì</span>';
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    if (prevBtn) prevBtn.style.display = 'flex';
    if (nextBtn) nextBtn.style.display = 'flex';
    
    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –ø–æ—á–∞—Ç–∫—É
    carousel.scrollTo({ left: 0, behavior: 'smooth' });
    
    // –ê–Ω—ñ–º—É—î–º–æ –∫–∞—Ä—Ç–∫–∏
    requestAnimationFrame(() => {
      cards.forEach((card, index) => {
        card.style.transition = 'opacity 0.8s ease-in-out, transform 0.8s cubic-bezier(0.34, 1.56, 0.64, 1)';
        card.style.transitionDelay = `${index * 0.015}s`;
        
        requestAnimationFrame(() => {
          card.style.opacity = '1';
          card.style.transform = 'scale(1)';
        });
      });
    });
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∏–ª—ñ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
      cards.forEach(card => {
        card.style.opacity = '';
        card.style.transform = '';
        card.style.transition = '';
        card.style.transitionDelay = '';
      });
      carousel.classList.remove('animating');
    }, 800 + cards.length * 15);
    
  } else {
    // ========== –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø ==========
    
    // –•–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    if (prevBtn) prevBtn.style.display = 'none';
    if (nextBtn) nextBtn.style.display = 'none';
    
    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ–∫ –¥–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    cards.forEach((card, index) => {
      card.style.opacity = '0';
      card.style.transform = 'scale(0.95)';
    });
    
    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å expanded
    carousel.classList.add('expanded');
    toggleBtn.classList.add('expanded');
    toggleBtn.innerHTML = '–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—à–µ <span class="expand-icon" style="transform: rotate(180deg);">‚Üì</span>';
    
    // –ê–Ω—ñ–º—É—î–º–æ –∫–∞—Ä—Ç–∫–∏ (–ø–æ—è–≤–∞)
    requestAnimationFrame(() => {
      cards.forEach((card, index) => {
        card.style.transition = 'opacity 0.8s ease-in-out, transform 0.8s cubic-bezier(0.34, 1.56, 0.64, 1)';
        card.style.transitionDelay = `${index * 0.015}s`;
        
        requestAnimationFrame(() => {
          card.style.opacity = '1';
          card.style.transform = 'scale(1)';
        });
      });
    });
    
    // –û—á–∏—â–∞—î–º–æ —Å—Ç–∏–ª—ñ –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
      cards.forEach(card => {
        card.style.opacity = '';
        card.style.transform = '';
        card.style.transition = '';
        card.style.transitionDelay = '';
      });
      carousel.classList.remove('animating');
    }, 800 + cards.length * 15);
  }
}

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∫–∞—Ä—É—Å–µ–ª—ñ
function createExpandToggleButton(carouselContainer, productCount) {
  const expandContainer = document.createElement('div');
  expandContainer.className = 'carousel-expand-container';
  
  const toggleBtn = document.createElement('button');
  toggleBtn.className = 'expand-toggle-btn';
  toggleBtn.innerHTML = `–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ (${productCount}) <span class="expand-icon">‚Üì</span>`;
  toggleBtn.onclick = () => toggleCarouselView(carouselContainer);
  
  expandContainer.appendChild(toggleBtn);
  return expandContainer;
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–∞—Ä—É—Å–µ–ª—ñ (–∑–∞–≤–∂–¥–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–µ–∂–∏–º)
function restoreCarouselState(carouselContainer) {
  // –ó–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É - —Å—Ç–∞–Ω –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è
  return;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
let isQuickSearchRunning = false;

function performQuickSearch(event, query) {
  // –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å–ø–ª–∏—Ç—Ç—è –ø–æ–¥—ñ—ó
  if (event) {
    event.preventDefault();
    event.stopPropagation();
  }
  
  // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
  if (isQuickSearchRunning) {
    return false;
  }
  
  isQuickSearchRunning = true;
  
  // –•–æ–≤–∞—î–º–æ —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏
  const quickButtons = document.getElementById('quickSearchButtons');
  if (quickButtons) {
    quickButtons.style.display = 'none';
  }
  
  // –í–∏–∫–ª–∏–∫–∞—î–º–æ performChatSearch –Ω–∞–ø—Ä—è–º—É –∑ –∑–∞–ø–∏—Ç–æ–º
  performChatSearch(query);
  
  // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  setTimeout(() => { 
    isQuickSearchRunning = false;
  }, 1000);
  
  return true;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –∫–ª—ñ–∫—É
function activateSearchBox() {
  const searchInput = document.getElementById('chatSearchInput');
  if (searchInput) {
    searchInput.focus();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ—à—É–∫—É (—â–æ–± –Ω–µ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∞ input)
function handleSearchButtonClick(event) {
  event.stopPropagation(); // –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å–ø–ª—ã—Ç—Ç—è –ø–æ–¥—ñ—ó
  
  const btn = document.getElementById('chatSearchButton');
  // –Ø–∫—â–æ –∫–Ω–æ–ø–∫–∞ –º–∞—î –∫–ª–∞—Å 'searching', —Ü–µ –æ–∑–Ω–∞—á–∞—î —â–æ –ø–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–∏–π - —Å–∫–∞—Å–æ–≤—É—î–º–æ –π–æ–≥–æ
  if (btn && btn.classList.contains('searching')) {
    cancelChatSearch();
  } else {
    // –Ü–Ω–∞–∫—à–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –ø–æ—à—É–∫
    performChatSearch();
  }
}


function setSectionError(section,msg){
  const body=section.querySelector('.query-body');
  body.innerHTML=`<div class="result-placeholder"><p style="color:red;">–ü–æ–º–∏–ª–∫–∞: ${escapeHTML(msg)}</p></div>`;
}

// --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ ---
// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à —Ñ–æ—Ç–æ–∫
const imageCache = new Map();
// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
const ratingsCache = new Map();

// –°–∏—Å—Ç–µ–º–∞ —á–µ—Ä–≥–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
class ImageLoadQueue {
  constructor(maxConcurrent = 6) {
    this.maxConcurrent = maxConcurrent;
    this.currentLoading = 0;
    this.queue = [];
  }

  async add(fn) {
    // –Ø–∫—â–æ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –±–∞–≥–∞—Ç–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å, –¥–æ–¥–∞—î–º–æ –≤ —á–µ—Ä–≥—É
    if (this.currentLoading >= this.maxConcurrent) {
      return new Promise(resolve => {
        this.queue.push({ fn, resolve });
      });
    }

    // –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ–Ω—É—î–º–æ –æ–¥—Ä–∞–∑—É
    this.currentLoading++;
    try {
      await fn();
    } finally {
      this.currentLoading--;
      this.processQueue();
    }
  }

  processQueue() {
    if (this.queue.length > 0 && this.currentLoading < this.maxConcurrent) {
      const { fn, resolve } = this.queue.shift();
      this.currentLoading++;
      fn().finally(() => {
        this.currentLoading--;
        resolve();
        this.processQueue();
      });
    }
  }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É —á–µ—Ä–≥—É –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º 6 –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
const imageLoadQueue = new ImageLoadQueue(6);

// Intersection Observer –¥–ª—è lazy loading
let imageObserver = null;

function initImageObserver() {
  if (imageObserver) return;
  
  imageObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const container = entry.target;
        const goodCode = container.dataset.goodCode;
        if (goodCode && !container.dataset.loading) {
          container.dataset.loading = 'true';
          imageObserver.unobserve(container);
          loadProductImageQueued(container, goodCode);
        }
      }
    });
  }, {
    root: null,
    rootMargin: '50px', // –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å
    threshold: 0.01
  });
}

// –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–æ—é
async function loadProductImageQueued(containerElement, goodCode) {
  await imageLoadQueue.add(() => loadProductImage(containerElement, goodCode));
}

async function loadProductImage(containerElement, goodCode){
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∫–∞—Ä—Ç–∏–Ω–∫–∞
  const existingImg = containerElement.querySelector('img');
  if (existingImg) {
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
  if (imageCache.has(goodCode)) {
    const img = document.createElement('img');
    img.src = imageCache.get(goodCode);
    img.alt = '–§–æ—Ç–æ';
    img.className = 'product-image';
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–Ω–∏–∂–∫–∏, —è–∫—â–æ –≤—ñ–Ω —î
    const discountBadge = containerElement.querySelector('.cart-discount-badge');
    
    containerElement.innerHTML = '';
    containerElement.appendChild(img);
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–Ω–∏–∂–∫–∏, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    if (discountBadge) {
      containerElement.appendChild(discountBadge);
    }
    return;
  }
  
  const placeholder = containerElement.querySelector('.image-placeholder') || containerElement;
  if(!goodCode){ if(placeholder) placeholder.textContent='–§–æ—Ç–æ –Ω–µ–º–∞—î'; return; }
  
  try{
    const response = await fetch("https://api.ta-da.net.ua/v1.2/mobile/find.gcode",{
      method:"POST",
      headers:{ "Content-Type":"application/json","Authorization":TA_DA_API_TOKEN,"User-Language":"ua"},
      body:JSON.stringify({shop_id:"8", good_code:goodCode})
    });
    if(!response.ok) {
      // –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ API
      if(placeholder) placeholder.textContent='–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ';
      return;
    }
    const data = await response.json();
    if(data && data.photo){
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      imageCache.set(goodCode, data.photo);
      
      const img=document.createElement("img");
      img.src=data.photo; img.alt="–§–æ—Ç–æ"; img.className='product-image';
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–Ω–∏–∂–∫–∏, —è–∫—â–æ –≤—ñ–Ω —î
      const discountBadge = containerElement.querySelector('.cart-discount-badge');
      
      containerElement.innerHTML=''; 
      containerElement.appendChild(img);
      
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–Ω–∏–∂–∫–∏, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
      if (discountBadge) {
        containerElement.appendChild(discountBadge);
      }
    }else{ 
      if(placeholder) placeholder.textContent='–§–æ—Ç–æ –Ω–µ–º–∞—î'; 
    }
  }catch(err){
    // –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ API
    if(placeholder) placeholder.textContent='–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ';
  }
}



// --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É ---
async function loadProductRating(containerElement, goodCode, product = null){
  // –•–æ–≤–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —â–æ–± –Ω–µ –±—É–ª–æ "–º–∏–≥–∞–Ω–Ω—è" –ø—É—Å—Ç–æ–≥–æ –±–ª–æ–∫—É
  if (containerElement) {
    containerElement.style.visibility = 'hidden';
    containerElement.style.minHeight = '18px';
  }
  if(!goodCode || goodCode === 'undefined' || goodCode === 'null'){ 
    // –Ω–µ–º–∞—î –∫–æ–¥—É ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ
    if (containerElement) containerElement.style.visibility = 'hidden';
    return; 
  }

  // 1) –†–µ–Ω–¥–µ—Ä–∏–º–æ —ñ–∑ –∫–µ—à—É, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π ‚Äî –±–µ–∑ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
  try {
    if (ratingsCache.has(goodCode)) {
      const rating = ratingsCache.get(goodCode);
      if (!(rating > 0)) { containerElement.style.visibility = 'hidden'; return; }

      if(product) { product.rating = rating; }

      containerElement.style.visibility = 'visible';
      const ratingDiv = document.createElement("div");
      ratingDiv.className = 'product-rating';
      ratingDiv.style.cssText = 'margin: 4px 0; display: flex; align-items: center; gap: 4px;';

      const starsContainer = document.createElement("div");
      starsContainer.style.cssText = 'display: flex; gap: 1px;';
      const fullStars = Math.floor(rating);
      const hasHalfStar = rating % 1 >= 0.5;
      for(let i = 0; i < fullStars; i++) {
        const star = document.createElement("span");
        star.innerHTML = '‚òÖ';
        star.style.cssText = 'color: #ffc107; font-size: 14px;';
        starsContainer.appendChild(star);
      }
      if(hasHalfStar) {
        const halfStar = document.createElement("span");
        halfStar.innerHTML = '‚òÜ';
        halfStar.style.cssText = 'color: #ffc107; font-size: 14px;';
        starsContainer.appendChild(halfStar);
      }
      const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
      for(let i = 0; i < emptyStars; i++) {
        const emptyStar = document.createElement("span");
        emptyStar.innerHTML = '‚òÜ';
        emptyStar.style.cssText = 'color: #ddd; font-size: 14px;';
        starsContainer.appendChild(emptyStar);
      }
      const ratingText = document.createElement("span");
      ratingText.textContent = `(${rating.toFixed(1)})`;
      ratingText.style.cssText = 'color: #666; font-size: 12px; margin-left: 4px;';

      ratingDiv.appendChild(starsContainer);
      ratingDiv.appendChild(ratingText);
      containerElement.innerHTML = '';
      containerElement.appendChild(ratingDiv);
      return;
    }
  } catch(_) { /* ignore cache errors */ }
  
  try{
    const response = await fetch("/api/ta-da/find.gcode",{
      method:"POST",
      headers:{ "Content-Type":"application/json","Authorization":TA_DA_API_TOKEN,"User-Language":"ua"},
      body:JSON.stringify({shop_id:"8", good_code:goodCode})
    });
    if(!response.ok) {
      // –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ API ‚Äî –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
      if (containerElement) containerElement.style.visibility = 'hidden';
      return;
    }
    const data = await response.json();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if (data.error) {
      if (containerElement) containerElement.style.visibility = 'hidden';
      return;
    }
    
    if(data && data.rating !== undefined){
      const rating = parseFloat(data.rating);
      // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π (> 0)
      if (!(rating > 0)) { containerElement.style.visibility = 'hidden'; return; }
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, —è–∫—â–æ –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞–Ω–∏–π
      if(product) {
        product.rating = rating;
      }
      // –ö–ª–∞–¥–µ–º–æ –≤ –∫–µ—à, —â–æ–± –Ω–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ö
      try { ratingsCache.set(goodCode, rating); } catch(_) {}
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥—É –ª–∏—à–µ –∫–æ–ª–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è
      containerElement.style.visibility = 'visible';

      const ratingDiv = document.createElement("div");
      ratingDiv.className = 'product-rating';
      ratingDiv.style.cssText = 'margin: 4px 0; display: flex; align-items: center; gap: 4px;';
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑—ñ—Ä–æ—á–∫–∏
      const starsContainer = document.createElement("div");
      starsContainer.style.cssText = 'display: flex; gap: 1px;';
      const fullStars = Math.floor(rating);
      const hasHalfStar = rating % 1 >= 0.5;
      
      // –î–æ–¥–∞—î–º–æ –ø–æ–≤–Ω—ñ –∑—ñ—Ä–æ—á–∫–∏
      for(let i = 0; i < fullStars; i++) {
        const star = document.createElement("span");
        star.innerHTML = '‚òÖ';
        star.style.cssText = 'color: #ffc107; font-size: 14px;';
        starsContainer.appendChild(star);
      }
      
      // –î–æ–¥–∞—î–º–æ –ø—ñ–≤–∑—ñ—Ä–æ—á–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if(hasHalfStar) {
        const halfStar = document.createElement("span");
        halfStar.innerHTML = '‚òÜ';
        halfStar.style.cssText = 'color: #ffc107; font-size: 14px;';
        starsContainer.appendChild(halfStar);
      }
      
      // –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∑—ñ—Ä–æ—á–∫–∏
      const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
      for(let i = 0; i < emptyStars; i++) {
        const emptyStar = document.createElement("span");
        emptyStar.innerHTML = '‚òÜ';
        emptyStar.style.cssText = 'color: #ddd; font-size: 14px;';
        starsContainer.appendChild(emptyStar);
      }
      
      // –î–æ–¥–∞—î–º–æ —á–∏—Å–ª–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
      const ratingText = document.createElement("span");
      ratingText.textContent = `(${rating.toFixed(1)})`;
      ratingText.style.cssText = 'color: #666; font-size: 12px; margin-left: 4px;';
      
      ratingDiv.appendChild(starsContainer);
      ratingDiv.appendChild(ratingText);
      
      // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞ –¥–æ–¥–∞—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
      containerElement.innerHTML = '';
      containerElement.appendChild(ratingDiv);
    } else {
      // –ù–µ–º–∞—î —Ä–µ–π—Ç–∏–Ω–≥—É ‚Äî —Ö–æ–≤–∞—î–º–æ –±–ª–æ–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é
      if (containerElement) containerElement.style.visibility = 'hidden';
    }
  }catch(err){
    // –ú–æ–≤—á–∫–∏ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É ‚Äî —Ö–æ–≤–∞—î–º–æ –±–ª–æ–∫
    if (containerElement) containerElement.style.visibility = 'hidden';
  }
}

// --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ---
async function loadProductPrice(containerElement, goodCode, product = null){
  const placeholder = containerElement; // containerElement –≤–∂–µ —î .price-placeholder –µ–ª–µ–º–µ–Ω—Ç–æ–º
  
  if(!goodCode || goodCode === 'undefined' || goodCode === 'null'){ 
    if(placeholder) placeholder.textContent='–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'; 
    return; 
  }
  
  // 1) –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–µ—à –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ —Ü—ñ–Ω–∞–º–∏ (–±–µ–∑ –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É)
  try {
    if (productsWithPrices && productsWithPrices.has(goodCode)) {
      const cached = productsWithPrices.get(goodCode);
      const hasDiscount = !!(cached && cached.hasDiscount && cached.originalPrice && cached.price);
      const priceDiv = document.createElement("div");
      priceDiv.className = 'product-price v2';
      priceDiv.style.cssText = 'margin:10px 0 2px 0; display:flex; flex-direction:column; align-items:flex-start; gap:6px;';

      const formatParts = (val) => {
        const n = parseFloat(val);
        const fixed = isFinite(n) ? n.toFixed(2) : '0.00';
        const [m, f] = fixed.split('.');
        return { m, f };
      };

      if (hasDiscount) {
        const old = formatParts(cached.originalPrice);
        const oldLine = document.createElement('div');
        oldLine.className = 'old-price-line';
        oldLine.innerHTML = `<span class="old-price-amount">${old.m}<span class="minor">.${old.f}</span> ‚Ç¥</span>`;
        priceDiv.appendChild(oldLine);

        const nw = formatParts(cached.price);
        const newLine = document.createElement('div');
        newLine.className = 'new-price-line';
        newLine.innerHTML = `<span class="new-price-amount">${nw.m}<span class="minor">.${nw.f}</span> ‚Ç¥</span>`;
        priceDiv.appendChild(newLine);
      } else if (cached && cached.price !== undefined) {
        const cur = formatParts(cached.price);
        const only = document.createElement('div');
        only.className = 'new-price-line';
        only.innerHTML = `<span class="new-price-amount">${cur.m}<span class="minor">.${cur.f}</span> ‚Ç¥</span>`;
        priceDiv.appendChild(only);
      } else {
        // –Ø–∫—â–æ –∫–µ—à –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤ ‚Äî –≤–ø–∞–¥–µ–º–æ —É –º–µ—Ä–µ–∂–µ–≤–∏–π —à–ª—è—Ö –Ω–∏–∂—á–µ
        throw new Error('no-cached-price-fields');
      }

      containerElement.innerHTML = '';
      containerElement.appendChild(priceDiv);
      // –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π product ‚Äî –æ–Ω–æ–≤–∏–º–æ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è (—É–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—è)
      if (product) {
        product.price = cached.price;
        product.originalPrice = cached.originalPrice;
        product.hasDiscount = cached.hasDiscount;
      }
      return; // —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–∏–ª–∏ –∑ –∫–µ—à—É
    }
  } catch(_) { /* ignore cache errors */ }
  
  try{
    const response = await fetch("/api/ta-da/find.gcode",{
      method:"POST",
      headers:{ "Content-Type":"application/json","Authorization":TA_DA_API_TOKEN,"User-Language":"ua"},
      body:JSON.stringify({shop_id:"8", good_code:goodCode})
    });
    if(!response.ok) {
      // –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ API
      if(placeholder) placeholder.textContent='–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
      return;
    }
    const data = await response.json();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if (data.error) {
      if(placeholder) placeholder.textContent='–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
      return;
    }
    
    if(data && data.price !== undefined){
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–Ω—É –≤ –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, —è–∫—â–æ –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞–Ω–∏–π
      if(product) {
        product.price = data.discount_price && data.discount_price < data.price ? data.discount_price : data.price;
        product.originalPrice = data.price;
        product.hasDiscount = data.discount_price && data.discount_price < data.price;
        // –ö–ª–∞–¥–µ–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å–Ω–µ–π–ø—à–æ—Ç —É –∫–µ—à –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä—ñ–≤
        productsWithPrices.set(goodCode, {
          price: product.price,
          originalPrice: product.originalPrice,
          hasDiscount: product.hasDiscount
        });
        
        // –ú—ñ–Ω—ñ-–∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä –Ω–µ –ø–æ–∫–∞–∑—É—î —Ü—ñ–Ω–∏, —Ç—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
      }
      
      const priceDiv = document.createElement("div");
      priceDiv.className = 'product-price v2';
      priceDiv.style.cssText = 'margin:10px 0 2px 0; display:flex; flex-direction:column; align-items:flex-start; gap:6px;';

      const formatParts = (val) => {
        const [m, f] = parseFloat(val).toFixed(2).split('.');
        return { m, f };
      };

      if(data.discount_price && data.discount_price < data.price) {
        const old = formatParts(data.price);
        const oldLine = document.createElement('div');
        oldLine.className = 'old-price-line';
        oldLine.innerHTML = `<span class="old-price-amount">${old.m}<span class="minor">.${old.f}</span> ‚Ç¥</span>`;
        priceDiv.appendChild(oldLine);

        const nw = formatParts(data.discount_price);
        const newLine = document.createElement('div');
        newLine.className = 'new-price-line';
        newLine.innerHTML = `<span class="new-price-amount">${nw.m}<span class="minor">.${nw.f}</span> ‚Ç¥</span>`;
        priceDiv.appendChild(newLine);
      } else {
        const cur = formatParts(data.price);
        const only = document.createElement('div');
        only.className = 'new-price-line';
        only.innerHTML = `<span class="new-price-amount">${cur.m}<span class="minor">.${cur.f}</span> ‚Ç¥</span>`;
        priceDiv.appendChild(only);
      }

      containerElement.innerHTML = '';
      containerElement.appendChild(priceDiv);
    }else{ 
      if(placeholder) placeholder.textContent='–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'; 
    }
  }catch(err){
    // –¢–∏—Ö–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ API
    if(placeholder) placeholder.textContent='–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
  }
}


// --- –†–µ–Ω–¥–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—à—É–∫—É ---
function displaySimpleResults(products){
  resultsDivs.simple.innerHTML='';
  if(!products || products.length===0){
    resultsDivs.simple.innerHTML='<div class="result-placeholder"><p>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p></div>';
    return;
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ (–≤–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ score)
  const allProducts = products;
  
  allProducts.forEach((product, index)=>{
    const card=document.createElement('div');
    card.className='product-card';
    card.dataset.id=product.id;
    card.dataset.uuid=product.uuid;
    
    card.innerHTML=`
      <div class="product-image-container">
        <div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      </div>
      <div class="product-details">
        <h3>${escapeHTML(product.title_ua || "–ë–µ–∑ –Ω–∞–∑–≤–∏")}</h3>
        <div class="product-pricing-info">
          <div class="rating-placeholder"></div>
          <div class="price-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏...</div>
        </div>
        <button class="add-to-cart-btn">
          <svg viewBox="0 0 24 24" fill="currentColor" width="12" height="12">
            <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
          </svg>
          –ö—É–ø–∏—Ç–∏
        </button>
      </div>`;
    resultsDivs.simple.appendChild(card);
    
    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    card.classList.add('loading');
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    
    const priceElement = card.querySelector('.price-placeholder');
    const ratingElement = card.querySelector('.rating-placeholder');
    const imageElement = card.querySelector('.product-image-container');
    
    // –î–æ–¥–∞—î–º–æ good_code —è–∫ data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è lazy loading
    imageElement.dataset.goodCode = product.good_code;
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ observer —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–∏–π
    initImageObserver();
    
    // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ observer –¥–ª—è lazy loading
    imageObserver.observe(imageElement);
    
    // Found elements for product
    
    Promise.all([
      loadProductPrice(priceElement, product.good_code, product),
      loadProductRating(ratingElement, product.good_code, product)
    ]).finally(() => {
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
      card.classList.remove('loading');
    });
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç–∏"
    const addToCartBtn = card.querySelector('.add-to-cart-btn');
    addToCartBtn.onclick = async (e) => {
      e.stopPropagation();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
      if (card.classList.contains('loading')) {
        return;
      }
      
      
      await toggleCartItem(product);
    };
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è
    const imageContainer = card.querySelector('.product-image-container');
    
    if (imageContainer) {
      imageContainer.style.cursor = 'pointer'; // –î–æ–¥–∞—î–º–æ –∫—É—Ä—Å–æ—Ä pointer
      imageContainer.onclick = (e) => {
        e.stopPropagation();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const img = imageContainer.querySelector('img');
        
        if (img && img.src && !img.src.includes('placeholder')) {
          toggleImageZoom(imageContainer);
        } else {
        }
      };
    } else {
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ mouseleave –≤–∏–¥–∞–ª–µ–Ω–æ - —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è –≤ overlay
    
    // –í–∏–¥–∞–ª–µ–Ω–æ –∫–ª—ñ–∫ –Ω–∞ –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É - —Ç–µ–ø–µ—Ä —Ç–æ–≤–∞—Ä –¥–æ–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç–∏"
  });
}

// --- –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–≥–æ—Ä—É –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É ---
function moveWelcomeMessageUp() {
  if (welcomeMessageMoved) return;
  
  const welcomeMessage = document.querySelector('.assistant-message.welcome-message');
  if (welcomeMessage) {
    welcomeMessage.classList.add('after-search');
    welcomeMessageMoved = true;
  }
}

// --- –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ ---
function streamWelcomeGreeting() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (welcomeGreetingShown) return;
  
  const thread = document.getElementById('chatThread');
  if (!thread) return;
  
  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
  welcomeGreetingShown = true;
  
  // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏
  const aiExamples = document.getElementById('aiExamples');
  if (aiExamples) {
    aiExamples.style.display = 'none';
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é –¥—Ä—É–∫—É
  const msgEl = document.createElement('div');
  msgEl.className = 'assistant-message welcome-message';
  msgEl.textContent = '';
  thread.appendChild(msgEl);
  
  // –¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
  const greetingText = 'üëã –í—ñ—Ç–∞—î–º–æ —É —á–∞—Ç-–ø–æ—à—É–∫—É! –ù–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ, –∞–±–æ –∑–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.';
  
  // –ê–Ω—ñ–º–∞—Ü—ñ—è –¥—Ä—É–∫—É —Ç–µ–∫—Å—Ç—É
  let charIndex = 0;
  const typingInterval = setInterval(() => {
    if (charIndex < greetingText.length) {
      msgEl.textContent += greetingText[charIndex];
      charIndex++;
    } else {
      clearInterval(typingInterval);
      
      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –¥—Ä—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
      welcomeTypingComplete = true;
      
      // –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—Ä—É–∫—É –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é –∫–Ω–æ–ø–æ–∫
      // –ê–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç
      const limitCheck = checkChatSearchLimit();
      if (aiExamples && limitCheck.allowed) {
        aiExamples.style.display = 'block';
        
        // –ê–Ω—ñ–º—É—î–º–æ –ø–æ—è–≤—É –∫–Ω–æ–ø–æ–∫ –ø–æ —á–µ—Ä–∑—ñ
        const buttons = aiExamples.querySelectorAll('.ai-example-btn');
        buttons.forEach((btn, index) => {
          btn.style.opacity = '0';
          btn.style.transform = 'translateY(20px)';
          
          setTimeout(() => {
            btn.style.transition = 'all 0.4s ease-out';
            btn.style.opacity = '1';
            btn.style.transform = 'translateY(0)';
          }, index * 150); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–Ω–æ–ø–∫–∞–º–∏ 150–º—Å
        });
      }
    }
  }, 20);
}

// --- –£—Ç–∏–ª—ñ—Ç–∏ ---
function switchPage(pageName){
  for(const key in pages){ pages[key].classList.remove('active'); }
  pages[pageName].classList.add('active');
  
  // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
  if(pageName === 'simple'){
    const searchBox = document.getElementById('mainChatSearchBox');
    const contentWrapper = document.querySelector('.content-wrapper');
    if (searchBox) {
      searchBox.classList.remove('fixed-bottom');
    }
    if (contentWrapper) {
      contentWrapper.classList.remove('search-fixed');
    }
  }
  
  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —á–∞—Ç-–ø–æ—à—É–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ
  if(pageName === 'chat'){
    const chatSearchBox = document.getElementById('chatSearchBox');
    
    if (chatStep === 0) {
      // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω - –ø–æ—à—É–∫–æ–≤–∞ —Å—Ç—Ä–æ–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
      if (chatSearchBox) {
        chatSearchBox.classList.add('chat-search-box--center');
        chatSearchBox.classList.remove('chat-search-box--footer', 'chat-search-box--footer-static');
      }
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ GPT –∑ SSE –µ—Ñ–µ–∫—Ç–æ–º
      streamWelcomeGreeting();
    } else {
      // –ü—ñ—Å–ª—è –ø–æ—à—É–∫—É - —Å—Ç—Ä–æ–∫–∞ –≤–Ω–∏–∑—É –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
      if (chatSearchBox) {
        chatSearchBox.classList.remove('chat-search-box--center');
        if (!searchBoxAnimationShown) {
          chatSearchBox.classList.add('chat-search-box--footer');
          chatSearchBox.style.animation = 'slideDownToFooter 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';
          searchBoxAnimationShown = true;
        } else {
          chatSearchBox.classList.add('chat-search-box--footer-static');
          chatSearchBox.style.animation = 'none';
        }
        chatSearchBox.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –±—ñ–ª–∏–π –±–ª–æ–∫ –ø—ñ–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é
        const footerMask = document.getElementById('footer-mask');
        if (footerMask) {
          footerMask.style.display = 'block';
        }
      }
    }
  }
  
  // –°–∫–∏–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è —á–∞—Ç-–ø–æ—à—É–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ
  if(pageName === 'chat'){
    resetChatAnimations();
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏: –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —â–µ –Ω–µ –±—É–ª–æ –∂–æ–¥–Ω–æ–≥–æ –ø–æ—à—É–∫—É
    const searchBox = document.getElementById('chatSearchBox');
    const thread = document.getElementById('chatThread');
    // –Ø–∫—â–æ –≤–∂–µ –±—É–≤ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø–æ—à—É–∫ (chatStep > 0), –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç—Ä–æ–∫—É –≤–Ω–∏–∑—É
    if (searchBox && thread && thread.children.length === 0 && chatStep === 0) {
      searchBox.classList.add('chat-search-box--center');
      searchBox.classList.remove('chat-search-box--footer', 'chat-search-box--footer-static');
      
      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –±—ñ–ª–∏–π –±–ª–æ–∫ –ø—ñ–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é
      const footerMask = document.getElementById('footer-mask');
      if (footerMask) {
        footerMask.style.display = 'none';
      }
    } else if (searchBox && chatStep > 0) {
      // –Ø–∫—â–æ –≤–∂–µ –±—É–≤ –ø–æ—à—É–∫, —Ñ—ñ–∫—Å—É—î–º–æ —Å—Ç—Ä–æ–∫—É –≤–Ω–∏–∑—É (–∑–∞–≤–∂–¥–∏ –≤–∏–¥–∏–º–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ) –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
      searchBox.classList.remove('chat-search-box--center');
      if (!searchBoxAnimationShown) {
        searchBox.classList.add('chat-search-box--footer');
        searchBox.style.animation = 'slideDownToFooter 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';
        searchBoxAnimationShown = true;
      } else {
        searchBox.classList.add('chat-search-box--footer-static');
        searchBox.style.animation = 'none';
      }
      searchBox.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –±—ñ–ª–∏–π –±–ª–æ–∫ –ø—ñ–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é
      const footerMask = document.getElementById('footer-mask');
      if (footerMask) {
        footerMask.style.display = 'block';
      }
    }
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ SSE-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¢–Ü–õ–¨–ö–ò –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—Ö–æ–¥—ñ (—è–∫—â–æ thread –ø–æ—Ä–æ–∂–Ω—ñ–π)
    if (thread && thread.children.length === 0) {
      streamWelcomeGreeting();
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —ñ–∫–æ–Ω–æ–∫ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  syncHeaderSearchIcons();
}

function resetChatAnimations(){
  // –§—É–Ω–∫—Ü—ñ—è –∑–∞–ª–∏—à–µ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—å–æ—é - –∞–Ω—ñ–º–∞—Ü—ñ—ó –≤–∏–º–∫–Ω–µ–Ω–æ
}

// --- –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ö–µ–¥–µ—Ä–∞ ---
let currentSearchMode = 'simple'; // 'simple' –∞–±–æ 'chat'

// Typewriter –∞–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è placeholder
const searchPlaceholders = [
  "–§—É—Ç–±–æ–ª–∫–∞",
  "–†—É–∫–∞–≤–∏—á–∫–∏",
  "–ü–æ—Å—É–¥",
  "–Ü–≥—Ä–∞—à–∫–∏",
  "–ó–æ—à–∏—Ç–∏",
  "–°–≤—ñ—á–∫–∏",
  "–†—É—à–Ω–∏–∫–∏",
  "–¢–∞—Ä—ñ–ª–∫–∏",
  "–ú'—è—á",
  "–ü–∞–∑–ª–∏"
];

let typewriterIndex = 0;
let charIndex = 0;
let isDeleting = false;
let typewriterTimeout = null;
let isUserTyping = false;

function typewriterEffect() {
  const searchInput = document.getElementById('headerSearchInput');
  
  if (!searchInput || isUserTyping) {
    return;
  }
  
  const currentWord = searchPlaceholders[typewriterIndex];
  
  if (isDeleting) {
    // –°—Ç–∏—Ä–∞—î–º–æ —Å–∏–º–≤–æ–ª–∏
    charIndex--;
    searchInput.placeholder = currentWord.substring(0, charIndex);
    
    if (charIndex === 0) {
      isDeleting = false;
      typewriterIndex = (typewriterIndex + 1) % searchPlaceholders.length;
      typewriterTimeout = setTimeout(typewriterEffect, 500); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Å–ª–æ–≤–æ–º
    } else {
      typewriterTimeout = setTimeout(typewriterEffect, 50); // –®–≤–∏–¥–∫—ñ—Å—Ç—å —Å—Ç–∏—Ä–∞–Ω–Ω—è
    }
  } else {
    // –î—Ä—É–∫—É—î–º–æ —Å–∏–º–≤–æ–ª–∏
    charIndex++;
    searchInput.placeholder = currentWord.substring(0, charIndex);
    
    if (charIndex === currentWord.length) {
      isDeleting = true;
      typewriterTimeout = setTimeout(typewriterEffect, 2000); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∏—Ä–∞–Ω–Ω—è–º
    } else {
      typewriterTimeout = setTimeout(typewriterEffect, 100); // –®–≤–∏–¥–∫—ñ—Å—Ç—å –¥—Ä—É–∫—É
    }
  }
}

function startTypewriter() {
  const searchInput = document.getElementById('headerSearchInput');
  
  if (searchInput) {
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    searchInput.addEventListener('focus', () => {
      isUserTyping = true;
      if (typewriterTimeout) {
        clearTimeout(typewriterTimeout);
      }
      searchInput.placeholder = '–ü–æ—à—É–∫';
    });
    
    searchInput.addEventListener('blur', () => {
      // –Ø–∫—â–æ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—î –ø—ñ—Å–ª—è –≤—Ç—Ä–∞—Ç–∏ —Ñ–æ–∫—É—Å—É, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
      if (!searchInput.value) {
        isUserTyping = false;
        charIndex = 0;
        isDeleting = false;
        typewriterTimeout = setTimeout(typewriterEffect, 1000);
      }
    });
    
    searchInput.addEventListener('input', () => {
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≤–≤–æ–¥–∏—Ç–∏, –∑—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
      if (searchInput.value) {
        isUserTyping = true;
        if (typewriterTimeout) {
          clearTimeout(typewriterTimeout);
        }
      }
    });
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    setTimeout(() => {
      if (!searchInput.value) {
        typewriterEffect();
      }
    }, 1000);
  }
}

function switchToSimpleSearch(){
  currentSearchMode = 'simple';
  document.getElementById('simpleSearchIcon').classList.add('active');
  document.getElementById('chatSearchIcon').classList.remove('active');
  switchPage('simple');
  // –ù–ï –æ—á–∏—â–∞—î–º–æ –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ - –∑–∞–ª–∏—à–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –ø–æ—à—É–∫—É
  
  // –û—á–∏—â–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫
  clearSearchHistory();
  
  // –ù–ï —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —á–∞—Ç-–ø–æ—à—É–∫—É - –∑–∞–ª–∏—à–∞—î–º–æ chatStep —è–∫ —î
  // –¢—ñ–ª—å–∫–∏ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Ñ—É—Ç–µ—Ä –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ —á–∞—Ç-–ø–æ—à—É–∫—É
  hideFooter();
  syncHeaderSearchIcons();
}

function switchToChatSearch(){
  currentSearchMode = 'chat';
  document.getElementById('chatSearchIcon').classList.add('active');
  document.getElementById('simpleSearchIcon').classList.remove('active');
  // –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —è–∫ —É –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ—à—É–∫—É
  const chatPage = document.getElementById('chatSearchPage');
  if (chatPage) {
    chatPage.classList.remove('reopen');
    // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    void chatPage.offsetWidth;
    chatPage.classList.add('reopen');
  }
  switchPage('chat');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ –Ω–∞ —á–∞—Ç-–ø–æ—à—É–∫
  const limitCheck = checkChatSearchLimit();
  if (!limitCheck.allowed) {
    showChatSearchLimitMessage(limitCheck.minutesLeft);
  } else {
    hideChatSearchLimitMessage();
  }
  
  // –ù–ï –æ—á–∏—â–∞—î–º–æ –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—ñ - –∑–∞–ª–∏—à–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –ø–æ—à—É–∫—É
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω—É –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –ø–æ—à—É–∫ (chatStep === 0) —ñ –Ω–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º
  const mainSearchBox = document.getElementById('mainChatSearchBox');
  if (mainSearchBox) {
    const chatWelcomeSeen = (function(){ try { return sessionStorage.getItem(CHAT_WELCOME_SEEN_KEY) === '1'; } catch(_) { return false; } })();
    if (chatStep === 0 && !chatWelcomeSeen) {
      mainSearchBox.style.display = 'flex';
    } else {
      mainSearchBox.style.display = 'none';
    }
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–¥–ø–∏—Å–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –ø–æ—à—É–∫ (chatStep === 0) —ñ –Ω–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º
  const chatWelcome = document.querySelector('#chatSearchPage .chat-welcome');
  if (chatWelcome) {
    const chatWelcomeSeen = (function(){ try { return sessionStorage.getItem(CHAT_WELCOME_SEEN_KEY) === '1'; } catch(_) { return false; } })();
    if (chatStep === 0 && !chatWelcomeSeen) {
      chatWelcome.style.display = 'block';
    } else {
      chatWelcome.style.display = 'none';
    }
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π –±–ª–æ–∫ AI –ø–æ—à—É–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –ø–æ—à—É–∫ (chatStep === 0)
  const aiWelcomeContainer = document.getElementById('aiWelcomeContainer');
  if (aiWelcomeContainer) {
    if (chatStep === 0) {
      aiWelcomeContainer.style.display = 'block';
    } else {
      aiWelcomeContainer.style.display = 'none';
    }
  }
  
  // –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤ —Å–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ, –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—Ä—É–∫—É –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
  const aiExamples = document.getElementById('aiExamples');
  if (aiExamples) {
    const aiLimitCheck = checkChatSearchLimit();
    if (chatStep === 0 && welcomeTypingComplete && aiLimitCheck.allowed) {
      // –Ø–∫—â–æ –¥—Ä—É–∫ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —ñ –ª—ñ–º—ñ—Ç –Ω–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ - –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏
      aiExamples.style.display = 'block';
    } else {
      // –í —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö - –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏
      aiExamples.style.display = 'none';
    }
  }
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏
  const chatSearchBox = document.getElementById('chatSearchBox');
  if (chatSearchBox) {
    if (chatStep === 0) {
      chatSearchBox.classList.add('chat-search-box--center');
      chatSearchBox.classList.remove('chat-search-box--footer', 'chat-search-box--footer-static');
      
      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –±—ñ–ª–∏–π –±–ª–æ–∫ –ø—ñ–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é
      const footerMask = document.getElementById('footer-mask');
      if (footerMask) {
        footerMask.style.display = 'none';
      }
    } else {
      chatSearchBox.classList.remove('chat-search-box--center');
      if (!searchBoxAnimationShown) {
        chatSearchBox.classList.add('chat-search-box--footer');
        chatSearchBox.style.animation = 'slideDownToFooter 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';
        searchBoxAnimationShown = true;
      } else {
        chatSearchBox.classList.add('chat-search-box--footer-static');
        chatSearchBox.style.animation = 'none';
      }
      chatSearchBox.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –±—ñ–ª–∏–π –±–ª–æ–∫ –ø—ñ–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é
      const footerMask = document.getElementById('footer-mask');
      if (footerMask) {
        footerMask.style.display = 'block';
      }
    }
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —Ñ—É—Ç–µ—Ä —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–∂–µ –±—É–≤ –ø–æ—à—É–∫ (chatStep > 0)
  if (chatStep > 0) {
    showFooter();
  } else {
    hideFooter();
  }
  syncHeaderSearchIcons();
}

function toggleChatSearch(){
  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –∑–≤–∏—á–∞–π–Ω–∏–º –ø–æ—à—É–∫–æ–º —ñ —á–∞—Ç-–ø–æ—à—É–∫–æ–º
  if(currentSearchMode === 'chat'){
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    currentSearchMode = 'simple'; // –©–æ–± –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∑–Ω–æ–≤—É –≤—ñ–¥–∫—Ä–∏–≤—Å—è —á–∞—Ç
    document.getElementById('simpleSearchIcon').classList.remove('active');
    document.getElementById('chatSearchIcon').classList.remove('active');
    switchPage('welcome');
    syncHeaderSearchIcons();
  } else {
    switchToChatSearch();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ—à—É–∫—É –∑ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
function activateSimpleSearchFromWelcome() {
  // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –Ω–∞ —Å–∞–º–∏–π –≤–µ—Ä—Ö –ø–ª–∞–≤–Ω–æ
  window.scrollTo({
    top: 0,
    behavior: 'smooth'
  });
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∂–∏–º –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ—à—É–∫—É (–∞–∫—Ç–∏–≤—É—î–º–æ —ñ–∫–æ–Ω–∫—É)
  currentSearchMode = 'simple';
  document.getElementById('simpleSearchIcon').classList.add('active');
  document.getElementById('chatSearchIcon').classList.remove('active');
  syncHeaderSearchIcons();
  
  // –°—Ç–∞–≤–∏–º–æ —Ñ–æ–∫—É—Å –≤ –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É —Ö–µ–¥–µ—Ä–∞ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
  setTimeout(() => {
    const searchInput = document.getElementById('headerSearchInput');
    if (searchInput) {
      searchInput.focus();
    }
  }, 400); // –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –∞–Ω—ñ–º–∞—Ü—ñ—è –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–∫–ª–∞–¥–æ–º –∑–∞–ø–∏—Ç—É (AI –ø–æ—à—É–∫)
function fillChatSearchInput(text) {
  const chatInput = document.getElementById('chatSearchInput');
  if (chatInput) {
    chatInput.value = text;
    chatInput.focus();
    
    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏
    const chatSearchBox = document.getElementById('chatSearchBox');
    if (chatSearchBox) {
      chatSearchBox.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫—É AI –ø–æ—à—É–∫—É
function hideAIWelcome() {
  const aiWelcomeContainer = document.getElementById('aiWelcomeContainer');
  if (aiWelcomeContainer) {
    aiWelcomeContainer.style.display = 'none';
  }
  
  // –¢–∞–∫–æ–∂ —Ö–æ–≤–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤
  const aiExamples = document.getElementById('aiExamples');
  if (aiExamples) {
    aiExamples.style.display = 'none';
  }
}

// –£–∑–≥–æ–¥–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–∫–æ–Ω–æ–∫ —É —Ö–µ–¥–µ—Ä—ñ (–∫–æ–ª—ñ—Ä/—Ñ—ñ–ª—å—Ç—Ä)
function syncHeaderSearchIcons(){
  const simpleIcon = document.getElementById('simpleSearchIcon');
  const chatIcon = document.getElementById('chatSearchIcon');
  const chatImg = chatIcon ? chatIcon.querySelector('img') : null;
  if (!simpleIcon || !chatIcon) return;

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞ DOM, –∞ –Ω–µ –∑–∞ currentSearchMode
  const isChatActive = !!(pages.chat && pages.chat.classList.contains('active'));
  const isSimpleActive = !!(pages.simple && pages.simple.classList.contains('active'));
  const isWelcomeActive = !!(pages.welcome && pages.welcome.classList.contains('active'));

  // –°–∫–∏–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
  simpleIcon.classList.remove('active');
  chatIcon.classList.remove('active');
  if (chatImg) { chatImg.style.filter = 'grayscale(100%) brightness(60%)'; }

  if (isChatActive) {
    chatIcon.classList.add('active');
    if (chatImg) { chatImg.style.filter = 'none'; }
  } else if (isSimpleActive) {
    simpleIcon.classList.add('active');
    if (chatImg) { chatImg.style.filter = 'grayscale(100%) brightness(60%)'; }
  } else if (isWelcomeActive) {
    // –ù–∞ welcome –æ–±–∏–¥–≤—ñ —ñ–∫–æ–Ω–∫–∏ —Å—ñ—Ä—ñ
    if (chatImg) { chatImg.style.filter = 'grayscale(100%) brightness(60%)'; }
  } else {
    // –§–æ–ª–±–µ–∫: –æ–±–∏–¥–≤—ñ —Å—ñ—Ä—ñ
    if (chatImg) { chatImg.style.filter = 'grayscale(100%) brightness(60%)'; }
  }
}

function toggleCatalog(){
  // –§—É–Ω–∫—Ü—ñ—è –∫–∞—Ç–∞–ª–æ–≥—É
}

function toggleDeliveryOptions(){
  // –§—É–Ω–∫—Ü—ñ—è —Å–ø–æ—Å–æ–±—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
}

function toggleWishlist(){
  // –§—É–Ω–∫—Ü—ñ—è —Å–ø–∏—Å–∫—É –±–∞–∂–∞–Ω—å
}

function toggleProfile(){
  // –§—É–Ω–∫—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
}

function showAuthModal(){
  // –§—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
}

function goToHome(){
  // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
  switchToSimpleSearch();
  document.getElementById('headerSearchInput').value = '';
  document.getElementById('results-simple').innerHTML = '';
  
  // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —á–∞—Ç-–ø–æ—à—É–∫—É
  chatStep = 0;
  searchBoxAnimationShown = false; // —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä –∞–Ω—ñ–º–∞—Ü—ñ—ó
  const chatThread = document.getElementById('chatThread');
  if (chatThread) {
    chatThread.innerHTML = '';
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω—É –ø–æ—à—É–∫–æ–≤—É —Å—Ç—Ä–æ–∫—É —á–∞—Ç-–ø–æ—à—É–∫—É
  const mainSearchBox = document.getElementById('mainChatSearchBox');
  if (mainSearchBox) {
    mainSearchBox.style.display = 'flex';
    mainSearchBox.classList.remove('fixed-bottom');
  }
  
  // –°–∫–∏–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–∏–Ω–∞–º—ñ—á–Ω–æ—ó –ø–æ—à—É–∫–æ–≤–æ—ó —Å—Ç—Ä–æ–∫–∏ —á–∞—Ç—É (–ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ —Ü–µ–Ω—Ç—Ä –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é)
  const chatSearchBox = document.getElementById('chatSearchBox');
  if (chatSearchBox) {
    chatSearchBox.classList.remove('chat-search-box--footer', 'chat-search-box--footer-static');
    chatSearchBox.classList.add('chat-search-box--center');
    chatSearchBox.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
    chatSearchBox.style.animation = 'none'; // —Å–∫–∏–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –±—ñ–ª–∏–π –±–ª–æ–∫ –ø—ñ–¥ –ø–æ—à—É–∫–æ–≤–æ—é —Å—Ç—Ä–æ–∫–æ—é
    const footerMask = document.getElementById('footer-mask');
    if (footerMask) {
      footerMask.style.display = 'none';
    }
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–¥–ø–∏—Å–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É
  const chatWelcome = document.querySelector('.chat-welcome');
  if (chatWelcome) {
    chatWelcome.style.display = 'block';
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É
  const quickButtons = document.getElementById('quickSearchButtons');
  if (quickButtons) {
    quickButtons.style.display = 'flex';
  }

  // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—à—É–∫—É –Ω–∞ –¥–æ–º–∞—à–Ω—ñ–π
  const simpleWelcome = document.getElementById('simpleWelcome');
  if (simpleWelcome) {
    simpleWelcome.style.display = 'block';
  }
  
  // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Ñ—É—Ç–µ—Ä –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
  hideFooter();
  
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å–∏ –∑ content-wrapper
  const contentWrapper = document.querySelector('.content-wrapper');
  if (contentWrapper) {
    contentWrapper.classList.remove('search-fixed');
  }
}

function performSearchFromIcon(){
  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—à—É–∫—É –∑ —ñ–∫–æ–Ω–∫–∏ –ª—É–ø–∏
  const query = headerSearchInput.value.trim();
  
  if(query.length === 0 || query.split(/\s+/).length === 0) {
    return;
  }
  
  // –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ —ñ–∫–æ–Ω–∫–∏ –ø–æ—à—É–∫—É
  if(currentSearchMode !== 'simple'){
    currentSearchMode = 'simple';
    document.getElementById('simpleSearchIcon').classList.add('active');
    document.getElementById('chatSearchIcon').classList.remove('active');
    syncHeaderSearchIcons();
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  if(!pages.simple.classList.contains('active')){
    switchPage('simple');
    hideFooter();
    clearSearchHistory();
  }
  
  // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –±–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏
  performSimpleSearch();
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
chatSearchInput.addEventListener('keyup', e => { 
  if(e.key === 'Enter') performChatSearch(); 
});

// –ü–æ–∫–∞–∑–∞—Ç–∏/—Å—Ö–æ–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ—à—É–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É
chatSearchInput.addEventListener('input', e => {
  const btn = document.getElementById('chatSearchButton');
  if (e.target.value.trim().length > 0) {
    btn.classList.add('visible');
  } else {
    btn.classList.remove('visible');
  }
});

headerSearchInput.addEventListener('keyup', e => { 
  if(e.key === 'Enter') {
    const query = headerSearchInput.value.trim();
    
    if(query.length === 0 || query.split(/\s+/).length === 0) {
      return;
    }
    
    // –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ headerSearchInput
    if(currentSearchMode !== 'simple'){
      currentSearchMode = 'simple';
      document.getElementById('simpleSearchIcon').classList.add('active');
      document.getElementById('chatSearchIcon').classList.remove('active');
      syncHeaderSearchIcons();
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if(!pages.simple.classList.contains('active')){
      switchPage('simple');
      hideFooter();
      clearSearchHistory();
    }
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –±–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏
    performSimpleSearch();
  }
});

// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Å—Ç—Ä–æ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ - —Ö–µ–¥–µ—Ä —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—à—É–∫—É

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∑–∏–Ω–∏
document.addEventListener('DOMContentLoaded', function() {
  const clearCartBtn = document.getElementById('clear-cart-btn');
  if (clearCartBtn) {
    clearCartBtn.addEventListener('click', clearCart);
  }
  
  const checkoutBtn = document.getElementById('checkout-btn');
  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', function() {
      if (cartItems.length === 0) {
        return;
      }
      alert('–§—É–Ω–∫—Ü—ñ—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.');
    });
  }
});

function escapeHTML(s){
  return String(s).replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è drag scroll –¥–æ –∫–∞—Ä—É—Å–µ–ª—ñ
function addDragScrollToCarousel(carousel) {
  let isDown = false;
  let startX;
  let scrollLeft;
  let hasDragged = false;
  let dragTimeout = null;

  carousel.addEventListener('mousedown', (e) => {
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–ª—ñ–∫ –ø—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ
    if (e.button !== 0) return;
    
    isDown = true;
    hasDragged = false;
    carousel.style.cursor = 'grabbing';
    carousel.style.userSelect = 'none'; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—é —Ç–µ–∫—Å—Ç—É
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ clientX –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    startX = e.clientX;
    scrollLeft = carousel.scrollLeft;
    
    e.preventDefault();
  });

  carousel.addEventListener('mouseleave', () => {
    if (isDown) {
      isDown = false;
      carousel.style.cursor = 'grab';
      carousel.style.userSelect = '';
      
      // –Ø–∫—â–æ –±—É–≤ drag –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑–∞ –º–µ–∂—ñ, –±–ª–æ–∫—É—î–º–æ –∫–ª—ñ–∫
      if (hasDragged) {
        carousel.classList.add('drag-blocked');
        if (dragTimeout) clearTimeout(dragTimeout);
        dragTimeout = setTimeout(() => {
          carousel.classList.remove('drag-blocked');
        }, 100);
      }
    }
  });

  carousel.addEventListener('mouseup', (e) => {
    if (!isDown) return;
    
    isDown = false;
    carousel.style.cursor = 'grab';
    carousel.style.userSelect = ''; // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
    
    // –Ø–∫—â–æ –±—É–≤ drag, –±–ª–æ–∫—É—î–º–æ –∫–ª—ñ–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
    if (hasDragged) {
      e.preventDefault();
      e.stopPropagation();
      
      // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤
      carousel.classList.add('drag-blocked');
      
      // –ß–µ—Ä–µ–∑ 150–º—Å –∑–Ω—ñ–º–∞—î–º–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
      if (dragTimeout) clearTimeout(dragTimeout);
      dragTimeout = setTimeout(() => {
        carousel.classList.remove('drag-blocked');
        hasDragged = false;
      }, 150);
    }
  });
  
  // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ click event —ñ –±–ª–æ–∫—É—î–º–æ —è–∫—â–æ –±—É–≤ drag
  carousel.addEventListener('click', (e) => {
    if (carousel.classList.contains('drag-blocked')) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
      return false;
    }
  }, true); // true = capture phase, —Å–ø—Ä–∞—Ü—é—î —Ä–∞–Ω—ñ—à–µ –∑–∞ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏

  carousel.addEventListener('mousemove', (e) => {
    if (!isDown) return;
    
    e.preventDefault();
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ clientX –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    const x = e.clientX;
    const walk = x - startX;
    const totalWalk = Math.abs(walk);
    
    // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –∫–∞—Ä—É—Å–µ–ª—å —Ç–æ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä—É—Ö—É –º–∏—à—ñ
    // –§–æ—Ä–º—É–ª–∞: –Ω–æ–≤–∏–π scrollLeft = –ø–æ—á–∞—Ç–∫–æ–≤–∏–π scrollLeft - –∑—Å—É–≤ –º–∏—à—ñ
    carousel.scrollLeft = scrollLeft - walk;
    
    // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ drag —è–∫—â–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –±—ñ–ª—å—à–µ 3px (–¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–ª—ñ–∫—É)
    if (totalWalk > 3) {
      hasDragged = true;
    }
  });

  // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ drag –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–æ—â–æ)
  carousel.addEventListener('dragstart', (e) => {
    e.preventDefault();
  });

  // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—é —Ç–µ–∫—Å—Ç—É
  carousel.addEventListener('selectstart', (e) => {
    if (isDown) {
      e.preventDefault();
    }
  });

  // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É –º–µ–Ω—é –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  carousel.addEventListener('contextmenu', (e) => {
    if (hasDragged) {
      e.preventDefault();
    }
  });

  // –î–æ–¥–∞—î–º–æ –∫—É—Ä—Å–æ—Ä grab –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ
  carousel.style.cursor = 'grab';
  
  // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—å –¥–ª—è –ø–ª–∞–≤–Ω–æ—ó –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–≤–∏–º–∏–∫–∞—î–º–æ snap –ø—Ä–∏ drag)
  carousel.style.scrollBehavior = 'auto';
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —Ñ—É—Ç–µ—Ä–∞
function showFooter() {
  const footer = document.querySelector('.footer');
  if (footer) {
    footer.classList.add('visible');
    // –î–æ–¥–∞—î–º–æ padding-bottom –¥–ª—è body –∫–æ–ª–∏ —Ñ—É—Ç–µ—Ä –≤–∏–¥–∏–º–∏–π
    document.body.style.paddingBottom = '100px';
  }
}

// –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Ñ—É—Ç–µ—Ä–∞
function hideFooter() {
  const footer = document.querySelector('.footer');
  if (footer) {
    footer.classList.remove('visible');
    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ padding-bottom –∑ body –∫–æ–ª–∏ —Ñ—É—Ç–µ—Ä –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π
    document.body.style.paddingBottom = '0';
  }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –∑ —Ñ—É—Ç–µ—Ä–∞
function performFooterSearch() {
  const searchInput = document.getElementById('footerSearchInput');
  const query = searchInput.value.trim();
  
  if(query.length<2){ 
    return alert("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏."); 
  }
  
  if (query) {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —á–∞—Ç-–ø–æ—à—É–∫—É
    switchToChatSearch();

    // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ —Ñ—É—Ç–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø–æ—à—É–∫–æ–º
    searchInput.value = '';

    // –°–∫–∏–¥–∞—î–º–æ –ª–∏—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∞–ª–µ –ù–ï —Å–∫–∏–¥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å–µ–∫—Ü—ñ–π ‚Äî –Ω–æ–≤–∏–π –ø–æ—à—É–∫ –¥–æ–¥–∞—î—Ç—å—Å—è –Ω–∏–∂—á–µ
    chatDialogContext = null;

    // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ —è–∫ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥, —è–∫–∏–π –¥–æ–¥–∞—Å—Ç—å –Ω–æ–≤—É —Å–µ–∫—Ü—ñ—é
    runChatRound({ type: 'text', value: query });
  }
}

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ Enter –¥–ª—è —Ñ—É—Ç–µ—Ä–∞
document.addEventListener('DOMContentLoaded', function() {
  const footerSearchInput = document.getElementById('footerSearchInput');
  if (footerSearchInput) {
    footerSearchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        performFooterSearch();
      }
    });
  }

  // Back-to-top button logic
  const backBtn = document.getElementById('backToTopBtn');
  if (backBtn) {
    backBtn.addEventListener('click', () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }
  window.addEventListener('scroll', () => { try { updateBackToTopVisibility(); } catch(_){} });
});

function updateBackToTopVisibility() {
  const backBtn = document.getElementById('backToTopBtn');
  if (!backBtn) return;
  const scrolled = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
  // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ—Å–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –±—ñ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω–∏ –≤–∏—Å–æ—Ç–∏ –≤—ñ–∫–Ω–∞ –∞–±–æ > 600px
  const threshold = Math.max(600, Math.floor(window.innerHeight * 0.5));
  backBtn.style.display = scrolled > threshold ? 'flex' : 'none';
}

// --- –ú—ñ–Ω—ñ-–∫–æ—Ä–∑–∏–Ω–∞ ---
let miniCartCounter = 0;
// –¢–∞–π–º–µ—Ä–∏ –∞–≤—Ç–æ–∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º—ñ–Ω—ñ-–∫–æ—Ä–∑–∏–Ω–∏
const miniCartTimers = new Map();

function showMiniCart(product) {
  const container = document.getElementById('mini-cart-container');
  
  if (!container) {
    return;
  }
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
  const productName = product.title_ua || product.title_ru || '–¢–æ–≤–∞—Ä';
  miniCartCounter++;
  const currentItemId = miniCartCounter; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –º—ñ–Ω—ñ-–∫–æ—Ä–∑–∏–Ω–∏
  const miniCartItem = document.createElement('div');
  miniCartItem.className = 'mini-cart-item';
  miniCartItem.id = `mini-cart-${currentItemId}`;
  
  miniCartItem.innerHTML = `
    <div class="mini-cart-item-content">
      <div class="mini-cart-item-header">
        <span class="mini-cart-item-title">–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!</span>
      </div>
      <div class="mini-cart-item-info">
        <div class="mini-cart-item-name">${productName}</div>
        <div class="mini-cart-item-icon" onclick="showFullCart()" style="cursor: pointer;" title="–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É">
          <svg viewBox="0 0 24 24" fill="currentColor" width="16" height="16">
            <path d="M7 18c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12L8.1 13h7.45c.75 0 1.41-.41 1.75-1.03L21.7 4H5.21l-.94-2H1zm16 16c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
          </svg>
        </div>
      </div>
    </div>
  `;
  
  // –î–æ–¥–∞—î–º–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–≤ –∫—ñ–Ω–µ—Ü—å, —â–æ–± –Ω–æ–≤—ñ –∑'—è–≤–ª—è–ª–∏—Å—è –∑–Ω–∏–∑—É)
  container.appendChild(miniCartItem);
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
  setTimeout(() => {
    miniCartItem.classList.add('show');
  }, 10);
  
  // –•–æ–≤–∞—î–º–æ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥–∏, –∞–ª–µ –∑ –ø–∞—É–∑–æ—é –Ω–∞ hover
  const timerId = setTimeout(() => {
    hideMiniCartItem(currentItemId);
  }, 4000);
  miniCartTimers.set(currentItemId, timerId);

  // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –∫—É—Ä—Å–æ—Ä–∞
  miniCartItem.addEventListener('mouseenter', () => {
    const t = miniCartTimers.get(currentItemId);
    if (t) {
      clearTimeout(t);
      miniCartTimers.delete(currentItemId);
    }
  });

  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –≤—ñ–¥–≤–µ–¥–µ–Ω–Ω—ñ –∫—É—Ä—Å–æ—Ä–∞
  miniCartItem.addEventListener('mouseleave', () => {
    if (!miniCartTimers.has(currentItemId)) {
      const newTimer = setTimeout(() => {
        hideMiniCartItem(currentItemId);
      }, 1500);
      miniCartTimers.set(currentItemId, newTimer);
    }
  });
}

function hideMiniCartItem(id) {
  const miniCartItem = document.getElementById(`mini-cart-${id}`);
  if (miniCartItem) {
    const t = miniCartTimers.get(id);
    if (t) {
      clearTimeout(t);
      miniCartTimers.delete(id);
    }
    miniCartItem.classList.remove('show');
    // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
      if (miniCartItem.parentNode) {
        miniCartItem.parentNode.removeChild(miniCartItem);
      }
    }, 300);
  }
}

function hideMiniCart() {
  // –•–æ–≤–∞—î–º–æ –≤—Å—ñ –º—ñ–Ω—ñ-–∫–æ—Ä–∑–∏–Ω–∏
  const container = document.getElementById('mini-cart-container');
  if (container) {
    const items = container.querySelectorAll('.mini-cart-item');
    items.forEach(item => {
      item.classList.remove('show');
      setTimeout(() => {
        if (item.parentNode) {
          item.parentNode.removeChild(item);
        }
      }, 300);
    });
  }
}

// –§—É–Ω–∫—Ü—ñ—è updateMiniCartPrice –≤–∏–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞

function updateCartBadge() {
  const badge = document.getElementById('headerCartBadge');
  if (badge) {
    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    badge.textContent = totalItems;
    if (totalItems > 0) {
      badge.classList.add('visible');
    } else {
      badge.classList.remove('visible');
    }
  } else {
  }
}

// --- –ü–æ–≤–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞ ---
function showFullCart() {
  const fullCart = document.getElementById('full-cart');
  if (fullCart) {
    fullCart.classList.add('show');
    renderFullCart();
  }
}

function hideFullCart() {
  const fullCart = document.getElementById('full-cart');
  if (fullCart) {
    fullCart.classList.remove('show');
  }
}


function addItemToFullCart(product) {
  const itemsList = document.getElementById('full-cart-items-list');
  if (!itemsList) return;
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ —î –≤ –ø–æ–≤–Ω—ñ–π –∫–æ—Ä–∑–∏–Ω—ñ
  const existingItem = itemsList.querySelector(`[data-product-id="${getProductId(product)}"]`);
  if (existingItem) return; // –¢–æ–≤–∞—Ä –≤–∂–µ —î –≤ –ø–æ–≤–Ω—ñ–π –∫–æ—Ä–∑–∏–Ω—ñ
  
  const item = cartItems.find(i => getProductId(i.product) === getProductId(product));
  if (!item) return;
  
  const quantity = item.quantity;
  const price = parseFloat(product.price) || 0;
  const itemTotal = price * quantity;
  const productName = product.title_ua || product.title_ru || '–¢–æ–≤–∞—Ä';
  
  // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è —Ü—ñ–Ω–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–Ω–∏–∂–∫–∏
  let priceHtml = '';
  if (product.hasDiscount && product.originalPrice) {
    const originalPrice = parseFloat(product.originalPrice);
    const discountPrice = parseFloat(product.price);
    const discount = Math.round(((originalPrice - discountPrice) / originalPrice) * 100);
    
    priceHtml = `
      <div class="cart-item-price">
        <div class="price-line original-price">${originalPrice.toFixed(2)} ‚Ç¥</div>
        <div class="price-line discounted-price">${discountPrice.toFixed(2)} ‚Ç¥</div>
      </div>
    `;
  } else {
    priceHtml = `
      <div class="cart-item-price">
        <div class="price-line total-price">${price.toFixed(2)} ‚Ç¥</div>
      </div>
    `;
  }
  
  const itemCard = document.createElement('div');
  itemCard.className = 'cart-item-card';
  itemCard.setAttribute('data-product-id', getProductId(product));
  
  // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑ –∑–Ω–∞—á–∫–æ–º –∑–Ω–∏–∂–∫–∏
  let imageHtml = `
    <div class="cart-item-image">
      <div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
    </div>
  `;
  
  // –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–Ω–∏–∂–∫–∏, —è–∫—â–æ —î –∑–Ω–∏–∂–∫–∞
  if (product.hasDiscount && product.originalPrice) {
    const originalPrice = parseFloat(product.originalPrice);
    const discountPrice = parseFloat(product.price);
    const discount = Math.round(((originalPrice - discountPrice) / originalPrice) * 100);
    imageHtml = `
      <div class="cart-item-image">
        <div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
        <div class="cart-discount-badge">-${discount}%</div>
      </div>
    `;
  }
  
  itemCard.innerHTML = `
    ${imageHtml}
    <div class="cart-item-details">
      <div class="cart-item-header">
        <div class="cart-item-name">${productName}</div>
        <button class="cart-item-menu" onclick="removeCartItem('${getProductId(product)}')" title="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä">√ó</button>
      </div>
      <div class="cart-item-price-info">
        <div class="cart-item-price-label">–¶—ñ–Ω–∞ –∑–∞ 1 —à—Ç.</div>
        <div class="cart-item-price">
          ${priceHtml}
        </div>
      </div>
      <div class="cart-item-quantity-section">
        <div class="cart-item-quantity">
          <button class="quantity-btn" onclick="changeQuantity('${getProductId(product)}', -1)">-</button>
          <span class="quantity-display">${quantity}</span>
          <button class="quantity-btn" onclick="changeQuantity('${getProductId(product)}', 1)">+</button>
        </div>
        <div class="cart-item-total-price">
          <div class="cart-item-total-amount">${itemTotal.toFixed(2)} ‚Ç¥</div>
        </div>
      </div>
    </div>
  `;
  
  itemsList.appendChild(itemCard);
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—Ä–∑–∏–Ω—ñ —á–µ—Ä–µ–∑ —á–µ—Ä–≥—É
  const imageContainer = itemCard.querySelector('.cart-item-image');
  if (imageContainer && product.good_code) {
    loadProductImageQueued(imageContainer, product.good_code);
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
  const itemsCount = document.getElementById('full-cart-items-count');
  const totalPrice = document.getElementById('full-cart-total-price');
  
  if (itemsCount && totalPrice) {
    let total = 0;
    const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    
    cartItems.forEach((item) => {
      const price = parseFloat(item.product.price) || 0;
      total += price * item.quantity;
    });
    
    itemsCount.textContent = totalItems;
    totalPrice.textContent = `${total.toFixed(2)} ‚Ç¥`;
  }
}

function updateCartTotals() {
  const itemsCount = document.getElementById('full-cart-items-count');
  const totalPrice = document.getElementById('full-cart-total-price');
  
  if (!itemsCount || !totalPrice) return;
  
  let total = 0;
  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  
  cartItems.forEach((item) => {
    const price = parseFloat(item.product.price) || 0;
    total += price * item.quantity;
  });
  
  itemsCount.textContent = totalItems;
  totalPrice.textContent = `${total.toFixed(2)} ‚Ç¥`;
}

function renderFullCart() {
  const itemsList = document.getElementById('full-cart-items-list');
  const itemsCount = document.getElementById('full-cart-items-count');
  const totalPrice = document.getElementById('full-cart-total-price');
  const checkoutBtn = document.querySelector('.full-cart-checkout-btn');
  
  if (!itemsList || !itemsCount || !totalPrice) {
    return;
  }
  
  if (cartItems.length === 0) {
    itemsList.innerHTML = '<p class="empty-cart-message">–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</p>';
    itemsCount.textContent = '0';
    totalPrice.textContent = '0 ‚Ç¥';
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É checkout –∫–æ–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
    if (checkoutBtn) {
      checkoutBtn.style.display = 'none';
    }
    return;
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É checkout –∫–æ–ª–∏ —î —Ç–æ–≤–∞—Ä–∏
  if (checkoutBtn) {
    checkoutBtn.style.display = 'flex';
  }
  
  // –†–µ–Ω–¥–µ—Ä–∏–º–æ —Ç–æ–≤–∞—Ä–∏
  itemsList.innerHTML = '';
  let total = 0;
  
  cartItems.forEach((item, index) => {
    const product = item.product;
    const quantity = item.quantity;
    const price = parseFloat(product.price) || 0;
    const itemTotal = price * quantity;
    total += itemTotal;
    
    const productName = product.title_ua || product.title_ru || '–¢–æ–≤–∞—Ä';
    const productImage = product.image || '';
    
    // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è —Ü—ñ–Ω–∏ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–Ω–∏–∂–∫–∏
    let priceHtml = '';
    if (product.hasDiscount && product.originalPrice) {
      const originalPrice = parseFloat(product.originalPrice);
      const discountPrice = parseFloat(product.price);
      const discount = Math.round(((originalPrice - discountPrice) / originalPrice) * 100);
      
      priceHtml = `
        <div class="cart-item-price">
          <div class="price-line original-price">${originalPrice.toFixed(2)} ‚Ç¥</div>
          <div class="price-line discounted-price">${discountPrice.toFixed(2)} ‚Ç¥</div>
        </div>
      `;
    } else {
      priceHtml = `
        <div class="cart-item-price">
          <div class="price-line total-price">${price.toFixed(2)} ‚Ç¥</div>
        </div>
      `;
    }
    
    const itemCard = document.createElement('div');
    itemCard.className = 'cart-item-card';
    itemCard.setAttribute('data-product-id', getProductId(product));
    // –§–æ—Ä–º—É—î–º–æ HTML –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑ –∑–Ω–∞—á–∫–æ–º –∑–Ω–∏–∂–∫–∏
    let imageHtml = `
      <div class="cart-item-image">
        <div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      </div>
    `;
    
    // –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–æ–∫ –∑–Ω–∏–∂–∫–∏, —è–∫—â–æ —î –∑–Ω–∏–∂–∫–∞
    if (product.hasDiscount && product.originalPrice) {
      const originalPrice = parseFloat(product.originalPrice);
      const discountPrice = parseFloat(product.price);
      const discount = Math.round(((originalPrice - discountPrice) / originalPrice) * 100);
      imageHtml = `
        <div class="cart-item-image">
          <div class="image-placeholder">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
          <div class="cart-discount-badge">-${discount}%</div>
        </div>
      `;
    }
    
    itemCard.innerHTML = `
      ${imageHtml}
      <div class="cart-item-details">
        <div class="cart-item-header">
          <div class="cart-item-name">${productName}</div>
          <button class="cart-item-menu" onclick="removeCartItem('${getProductId(product)}')" title="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä">√ó</button>
        </div>
        <div class="cart-item-price-info">
          <div class="cart-item-price-label">–¶—ñ–Ω–∞ –∑–∞ 1 —à—Ç.</div>
          <div class="cart-item-price">
            ${priceHtml}
          </div>
        </div>
        <div class="cart-item-quantity-section">
          <div class="cart-item-quantity">
            <button class="quantity-btn" onclick="changeQuantity('${getProductId(product)}', -1)">-</button>
            <span class="quantity-display">${quantity}</span>
            <button class="quantity-btn" onclick="changeQuantity('${getProductId(product)}', 1)">+</button>
          </div>
          <div class="cart-item-total-price">
            <div class="cart-item-total-amount">${itemTotal.toFixed(2)} ‚Ç¥</div>
          </div>
        </div>
      </div>
    `;
    
    itemsList.appendChild(itemCard);
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—Ä–∑–∏–Ω—ñ —á–µ—Ä–µ–∑ —á–µ—Ä–≥—É
    const imageContainer = itemCard.querySelector('.cart-item-image');
    if (imageContainer && product.good_code) {
      loadProductImageQueued(imageContainer, product.good_code);
    }
  });
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
  updateCartTotals();
}

function removeCartItem(productId) {
  cartItems = cartItems.filter(item => getProductId(item.product) !== productId);
  
  // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –∑ DOM
  const itemCard = document.querySelector(`[data-product-id="${productId}"]`);
  if (itemCard) {
    itemCard.remove();
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
  if (cartItems.length === 0) {
    const itemsCount = document.getElementById('full-cart-items-count');
    const totalPrice = document.getElementById('full-cart-total-price');
    const checkoutBtn = document.querySelector('.full-cart-checkout-btn');
    
    if (itemsCount) itemsCount.textContent = '0';
    if (totalPrice) totalPrice.textContent = '0 ‚Ç¥';
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ä–æ–∂–Ω—é –∫–æ—Ä–∑–∏–Ω—É
    const itemsList = document.getElementById('full-cart-items-list');
    if (itemsList) {
      itemsList.innerHTML = '<p class="empty-cart-message">–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</p>';
    }
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É checkout –∫–æ–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
    if (checkoutBtn) {
      checkoutBtn.style.display = 'none';
    }
  } else {
    updateCartTotals();
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É checkout –∫–æ–ª–∏ —î —Ç–æ–≤–∞—Ä–∏
    const checkoutBtn = document.querySelector('.full-cart-checkout-btn');
    if (checkoutBtn) {
      checkoutBtn.style.display = 'flex';
    }
  }
  
  renderCart(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–æ—à–∏–∫ —Ç–µ–∂
  renderFullCart(); // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É
  updateSelectedCards(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫
  updateCartBadge(); // –û–Ω–æ–≤–ª—é—î–º–æ –±–µ–π–¥–∂ –≤ —Ö–µ–¥–µ—Ä—ñ
}

function proceedToCheckout() {
  if (cartItems.length === 0) {
    return;
  }
  // –§—É–Ω–∫—Ü—ñ—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ
}

// --- –ó–±—ñ–ª—å—à–µ–Ω–Ω—è —Ñ–æ—Ç–æ ---
function showImageZoom(imageSrc) {
  const overlay = document.getElementById('image-zoom-overlay');
  const image = document.getElementById('image-zoom-image');
  
  if (overlay && image) {
    image.src = imageSrc;
    overlay.classList.add('show');
    document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫—É—î–º–æ —Å–∫—Ä–æ–ª
  }
}

function closeImageZoom() {
  // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å—ñ –∑–±—ñ–ª—å—à–µ–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏
  const overlays = document.querySelectorAll('.image-zoom-overlay.show');
  overlays.forEach(overlay => {
    document.body.removeChild(overlay);
  });
  
  // –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ –∑–±—ñ–ª—å—à–µ–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
  const zoomedContainers = document.querySelectorAll('.image-container.zoomed');
  zoomedContainers.forEach(container => {
    container.classList.remove('zoomed');
  });
  
  document.body.style.overflow = ''; // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å–∫—Ä–æ–ª
}

// --- –õ–æ–∫–∞–ª—å–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Å—Ç–æ–º—É –ø–æ—à—É–∫—É ---
function toggleImageZoom(imageContainer) {
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∂–µ –∑–±—ñ–ª—å—à–µ–Ω–µ
  if (imageContainer.classList.contains('zoomed')) {
    resetImageZoom(imageContainer);
  } else {
    zoomImage(imageContainer);
  }
}

function zoomImage(imageContainer) {
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Å—Ç–∏–ª—ñ
  const img = imageContainer.querySelector('img');
  
  if (!img) {
    return;
  }
  
  // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  imageContainer.classList.add('zoomed');
  // –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ –∫–∞—Ä—Ç–∫—É –Ω–∞–¥ —Å—É—Å—ñ–¥–Ω—ñ–º–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞–ª–æ—Å—å
  const parentCard = imageContainer.closest('.product-card');
  if (parentCard) {
    parentCard.style.zIndex = '1000';
    parentCard.style.position = parentCard.style.position || 'relative';
  }
  
  // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –≤ 2 —Ä–∞–∑–∏ –Ω–∞ —Ç–æ–º—É –∂ –º—ñ—Å—Ü—ñ
  imageContainer.style.cssText += `
    transform: scale(2);
    z-index: 9999;
    position: relative;
    transition: transform 0.3s ease;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    border-radius: 8px;
    overflow: visible;
    transform-origin: center;
  `;
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
  const closeZoom = (e) => {
    if (!imageContainer.contains(e.target)) {
      resetImageZoom(imageContainer);
    }
  };
  
  const handleEscape = (e) => {
    if (e.key === 'Escape') {
      resetImageZoom(imageContainer);
    }
  };
  
  const handleMouseLeave = () => {
    resetImageZoom(imageContainer);
  };
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  imageContainer._zoomHandlers = {
    closeZoom,
    handleEscape,
    handleMouseLeave
  };
  
  // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é
  setTimeout(() => {
    document.addEventListener('click', closeZoom);
    document.addEventListener('keydown', handleEscape);
    imageContainer.addEventListener('mouseleave', handleMouseLeave);
  }, 100);
}

function resetImageZoom(imageContainer) {
  // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞—Å –∑–±—ñ–ª—å—à–µ–Ω–Ω—è
  imageContainer.classList.remove('zoomed');
  
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Å—Ç–∏–ª—ñ
  imageContainer.style.transform = '';
  imageContainer.style.zIndex = '';
  imageContainer.style.position = '';
  imageContainer.style.transition = '';
  imageContainer.style.boxShadow = '';
  imageContainer.style.borderRadius = '';
  imageContainer.style.overflow = '';
  imageContainer.style.transformOrigin = '';
  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ z-index –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏
  const parentCard = imageContainer.closest('.product-card');
  if (parentCard) {
    parentCard.style.zIndex = '';
    // position –Ω–µ —á—ñ–ø–∞—î–º–æ, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ layout
  }
  
  // –û—á–∏—â–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π, —è–∫—â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å
  if (imageContainer._zoomHandlers) {
    document.removeEventListener('click', imageContainer._zoomHandlers.closeZoom);
    document.removeEventListener('keydown', imageContainer._zoomHandlers.handleEscape);
    imageContainer.removeEventListener('mouseleave', imageContainer._zoomHandlers.handleMouseLeave);
    delete imageContainer._zoomHandlers;
  }
}

// –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑–±—ñ–ª—å—à–µ–Ω–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ Escape
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    closeImageZoom();
  }
});

